
Screen2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a64  08002a64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a68  08002a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002adc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002adc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003461  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001225  00000000  00000000  000234fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00024720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016270  00000000  00000000  00024f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005bf4  00000000  00000000  0003b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000803cc  00000000  00000000  00040d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  000c11b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029d4 	.word	0x080029d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029d4 	.word	0x080029d4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 f9d7 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f8b7 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8ef 	bl	8000700 <MX_GPIO_Init>
  lcd_puts(str_frac,2);
  lcd_putc(0xe0); //Beta
  HAL_Delay(5000);
  lcd_clear(); //Borra pantalla */

  keypad_init();
 8000522:	f001 f8d7 	bl	80016d4 <keypad_init>
  HAL_Delay(10);
 8000526:	200a      	movs	r0, #10
 8000528:	f000 fa30 	bl	800098c <HAL_Delay>
  lcd_init();
 800052c:	f001 fac0 	bl	8001ab0 <lcd_init>

  float num_f = 547.801,temporal_frac;
 8000530:	4b52      	ldr	r3, [pc, #328]	; (800067c <main+0x16c>)
 8000532:	617b      	str	r3, [r7, #20]
  uint32_t p_entera,p_frac;
  char str_entera[3];
  char str_frac[3];
  p_entera=(uint32_t)num_f; //Parte entera
 8000534:	6978      	ldr	r0, [r7, #20]
 8000536:	f7ff ffcb 	bl	80004d0 <__aeabi_f2uiz>
 800053a:	4603      	mov	r3, r0
 800053c:	613b      	str	r3, [r7, #16]
  temporal_frac=(num_f-p_entera)*1000;
 800053e:	6938      	ldr	r0, [r7, #16]
 8000540:	f7ff ff6e 	bl	8000420 <__aeabi_ui2f>
 8000544:	4603      	mov	r3, r0
 8000546:	4619      	mov	r1, r3
 8000548:	6978      	ldr	r0, [r7, #20]
 800054a:	f7ff feb7 	bl	80002bc <__aeabi_fsub>
 800054e:	4603      	mov	r3, r0
 8000550:	494b      	ldr	r1, [pc, #300]	; (8000680 <main+0x170>)
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fdfa 	bl	800014c <__aeabi_fmul>
 8000558:	4603      	mov	r3, r0
 800055a:	60fb      	str	r3, [r7, #12]
  p_frac=(uint32_t)temporal_frac;
 800055c:	68f8      	ldr	r0, [r7, #12]
 800055e:	f7ff ffb7 	bl	80004d0 <__aeabi_f2uiz>
 8000562:	4603      	mov	r3, r0
 8000564:	60bb      	str	r3, [r7, #8]
  sprintf(str_entera, "%3d",p_entera);
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	4946      	ldr	r1, [pc, #280]	; (8000684 <main+0x174>)
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fdb7 	bl	80020e0 <siprintf>
  sprintf(str_frac, "%3d",p_frac);
 8000572:	463b      	mov	r3, r7
 8000574:	68ba      	ldr	r2, [r7, #8]
 8000576:	4943      	ldr	r1, [pc, #268]	; (8000684 <main+0x174>)
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fdb1 	bl	80020e0 <siprintf>

  char tecla;

  uint32_t cursor_blink = 1; // 1 = on | 0 = off
 800057e:	2301      	movs	r3, #1
 8000580:	61fb      	str	r3, [r7, #28]
  uint32_t cursor = 1;
 8000582:	2301      	movs	r3, #1
 8000584:	61bb      	str	r3, [r7, #24]
  lcd_command(CURSOR_ON);
 8000586:	200f      	movs	r0, #15
 8000588:	f001 fc6e 	bl	8001e68 <lcd_command>
	  if ((tecla!=0) && (tecla!='#')&& (tecla!='*'))
	  lcd_putc(tecla);
	  if (tecla=='*')
	  lcd_command(CURSOR_MOVE_LEFT); */

	  tecla = keypad_read();
 800058c:	f001 f94c 	bl	8001828 <keypad_read>
 8000590:	4603      	mov	r3, r0
 8000592:	71fb      	strb	r3, [r7, #7]

	  if (tecla != 0 && tecla != '#' && tecla != '*' && tecla != 'A' && tecla != 'B' && tecla != 'C'
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d018      	beq.n	80005cc <main+0xbc>
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b23      	cmp	r3, #35	; 0x23
 800059e:	d015      	beq.n	80005cc <main+0xbc>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b2a      	cmp	r3, #42	; 0x2a
 80005a4:	d012      	beq.n	80005cc <main+0xbc>
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b41      	cmp	r3, #65	; 0x41
 80005aa:	d00f      	beq.n	80005cc <main+0xbc>
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b42      	cmp	r3, #66	; 0x42
 80005b0:	d00c      	beq.n	80005cc <main+0xbc>
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b43      	cmp	r3, #67	; 0x43
 80005b6:	d009      	beq.n	80005cc <main+0xbc>
			  && tecla != 'D' && cursor == 1) lcd_putc(tecla);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b44      	cmp	r3, #68	; 0x44
 80005bc:	d006      	beq.n	80005cc <main+0xbc>
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d103      	bne.n	80005cc <main+0xbc>
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fb9c 	bl	8001d04 <lcd_putc>

	  if (tecla == 'B' && cursor == 1) {
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	2b42      	cmp	r3, #66	; 0x42
 80005d0:	d110      	bne.n	80005f4 <main+0xe4>
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10d      	bne.n	80005f4 <main+0xe4>
		  if (cursor_blink == 1) {
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d105      	bne.n	80005ea <main+0xda>
			  lcd_command(CURSOR_BLINK_OFF);
 80005de:	200e      	movs	r0, #14
 80005e0:	f001 fc42 	bl	8001e68 <lcd_command>
			  cursor_blink = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	e004      	b.n	80005f4 <main+0xe4>
		  } else {
			  lcd_command(CURSOR_BLINK_ON);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f001 fc3c 	bl	8001e68 <lcd_command>
			  cursor_blink = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
		  }
	  }

	  if (tecla == 'D') {
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	2b44      	cmp	r3, #68	; 0x44
 80005f8:	d10d      	bne.n	8000616 <main+0x106>
		  if (cursor == 1) {
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d105      	bne.n	800060c <main+0xfc>
			  lcd_command(CURSOR_OFF);
 8000600:	200c      	movs	r0, #12
 8000602:	f001 fc31 	bl	8001e68 <lcd_command>
			  cursor = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	e004      	b.n	8000616 <main+0x106>
		  } else {
			  lcd_command(CURSOR_ON);
 800060c:	200f      	movs	r0, #15
 800060e:	f001 fc2b 	bl	8001e68 <lcd_command>
			  cursor = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
		  }
	  }

	  if (tecla == '*') lcd_command(CURSOR_MOVE_LEFT);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b2a      	cmp	r3, #42	; 0x2a
 800061a:	d102      	bne.n	8000622 <main+0x112>
 800061c:	2010      	movs	r0, #16
 800061e:	f001 fc23 	bl	8001e68 <lcd_command>

	  if (tecla == '#') lcd_command(CURSOR_MOVE_RIGHT);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b23      	cmp	r3, #35	; 0x23
 8000626:	d102      	bne.n	800062e <main+0x11e>
 8000628:	2014      	movs	r0, #20
 800062a:	f001 fc1d 	bl	8001e68 <lcd_command>

	  if (tecla == 'C') lcd_clear();
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b43      	cmp	r3, #67	; 0x43
 8000632:	d101      	bne.n	8000638 <main+0x128>
 8000634:	f001 fd1a 	bl	800206c <lcd_clear>

	  if (tecla == 'A') {
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b41      	cmp	r3, #65	; 0x41
 800063c:	d1a6      	bne.n	800058c <main+0x7c>
		  lcd_clear();
 800063e:	f001 fd15 	bl	800206c <lcd_clear>
		  lcd_puts("Hello World :D",14);
 8000642:	210e      	movs	r1, #14
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0x178>)
 8000646:	f001 fcc1 	bl	8001fcc <lcd_puts>

		  lcd_gotoxy(1,2);
 800064a:	2102      	movs	r1, #2
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fcd7 	bl	8002000 <lcd_gotoxy>
		  lcd_puts(str_entera,3);
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2103      	movs	r1, #3
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fcb8 	bl	8001fcc <lcd_puts>
		  lcd_putc('.');
 800065c:	202e      	movs	r0, #46	; 0x2e
 800065e:	f001 fb51 	bl	8001d04 <lcd_putc>
		  lcd_puts(str_frac,3);
 8000662:	463b      	mov	r3, r7
 8000664:	2103      	movs	r1, #3
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fcb0 	bl	8001fcc <lcd_puts>

		  lcd_putc(' ');
 800066c:	2020      	movs	r0, #32
 800066e:	f001 fb49 	bl	8001d04 <lcd_putc>
		  lcd_putc(0xc0);
 8000672:	20c0      	movs	r0, #192	; 0xc0
 8000674:	f001 fb46 	bl	8001d04 <lcd_putc>
	  tecla = keypad_read();
 8000678:	e788      	b.n	800058c <main+0x7c>
 800067a:	bf00      	nop
 800067c:	4408f344 	.word	0x4408f344
 8000680:	447a0000 	.word	0x447a0000
 8000684:	080029ec 	.word	0x080029ec
 8000688:	080029f0 	.word	0x080029f0

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fd18 	bl	80020d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fc1f 	bl	8000f04 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80006cc:	f000 f83a 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fe8d 	bl	8001408 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006f4:	f000 f826 	bl	8000744 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3740      	adds	r7, #64	; 0x40
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_GPIO_Init+0x40>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <MX_GPIO_Init+0x40>)
 800070c:	f043 0320 	orr.w	r3, r3, #32
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_GPIO_Init+0x40>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0320 	and.w	r3, r3, #32
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_GPIO_Init+0x40>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a07      	ldr	r2, [pc, #28]	; (8000740 <MX_GPIO_Init+0x40>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MX_GPIO_Init+0x40>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_MspInit+0x5c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x5c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x5c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x60>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_MspInit+0x60>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f8ab 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800080c:	4a14      	ldr	r2, [pc, #80]	; (8000860 <_sbrk+0x5c>)
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <_sbrk+0x60>)
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d102      	bne.n	8000826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <_sbrk+0x64>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <_sbrk+0x68>)
 8000824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	429a      	cmp	r2, r3
 8000832:	d207      	bcs.n	8000844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000834:	f001 fc22 	bl	800207c <__errno>
 8000838:	4603      	mov	r3, r0
 800083a:	220c      	movs	r2, #12
 800083c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000842:	e009      	b.n	8000858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <_sbrk+0x64>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <_sbrk+0x64>)
 8000854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000856:	68fb      	ldr	r3, [r7, #12]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005000 	.word	0x20005000
 8000864:	00000400 	.word	0x00000400
 8000868:	2000008c 	.word	0x2000008c
 800086c:	200000a8 	.word	0x200000a8

08000870 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a2:	f7ff ffe5 	bl	8000870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f001 fbef 	bl	8002088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fe31 	bl	8000510 <main>
  bx lr
 80008ae:	4770      	bx	lr
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008b8:	08002a6c 	.word	0x08002a6c
  ldr r2, =_sbss
 80008bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008c0:	200000a4 	.word	0x200000a4

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <HAL_Init+0x28>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <HAL_Init+0x28>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 f92b 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008de:	200f      	movs	r0, #15
 80008e0:	f000 f808 	bl	80008f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e4:	f7ff ff34 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40022000 	.word	0x40022000

080008f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_InitTick+0x54>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x58>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4619      	mov	r1, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	fbb3 f3f1 	udiv	r3, r3, r1
 800090e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f935 	bl	8000b82 <HAL_SYSTICK_Config>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e00e      	b.n	8000940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b0f      	cmp	r3, #15
 8000926:	d80a      	bhi.n	800093e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000928:	2200      	movs	r2, #0
 800092a:	6879      	ldr	r1, [r7, #4]
 800092c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000930:	f000 f90b 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <HAL_InitTick+0x5c>)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	e000      	b.n	8000940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000000 	.word	0x20000000
 800094c:	20000008 	.word	0x20000008
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <HAL_IncTick+0x1c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x20>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <HAL_IncTick+0x20>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	20000008 	.word	0x20000008
 8000974:	20000090 	.word	0x20000090

08000978 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b02      	ldr	r3, [pc, #8]	; (8000988 <HAL_GetTick+0x10>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000090 	.word	0x20000090

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff fff0 	bl	8000978 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a4:	d005      	beq.n	80009b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_Delay+0x44>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b2:	bf00      	nop
 80009b4:	f7ff ffe0 	bl	8000978 <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d8f7      	bhi.n	80009b4 <HAL_Delay+0x28>
  {
  }
}
 80009c4:	bf00      	nop
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff49 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5e 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e169      	b.n	8000e84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8158 	bne.w	8000e7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4a9a      	ldr	r2, [pc, #616]	; (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d05e      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bd8:	4a98      	ldr	r2, [pc, #608]	; (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d875      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bde:	4a98      	ldr	r2, [pc, #608]	; (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d058      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000be4:	4a96      	ldr	r2, [pc, #600]	; (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d86f      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bea:	4a96      	ldr	r2, [pc, #600]	; (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d052      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bf0:	4a94      	ldr	r2, [pc, #592]	; (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d869      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000bf6:	4a94      	ldr	r2, [pc, #592]	; (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d04c      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000bfc:	4a92      	ldr	r2, [pc, #584]	; (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d863      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c02:	4a92      	ldr	r2, [pc, #584]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d046      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
 8000c08:	4a90      	ldr	r2, [pc, #576]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d85d      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c0e:	2b12      	cmp	r3, #18
 8000c10:	d82a      	bhi.n	8000c68 <HAL_GPIO_Init+0xcc>
 8000c12:	2b12      	cmp	r3, #18
 8000c14:	d859      	bhi.n	8000cca <HAL_GPIO_Init+0x12e>
 8000c16:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <HAL_GPIO_Init+0x80>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c97 	.word	0x08000c97
 8000c20:	08000c71 	.word	0x08000c71
 8000c24:	08000c83 	.word	0x08000c83
 8000c28:	08000cc5 	.word	0x08000cc5
 8000c2c:	08000ccb 	.word	0x08000ccb
 8000c30:	08000ccb 	.word	0x08000ccb
 8000c34:	08000ccb 	.word	0x08000ccb
 8000c38:	08000ccb 	.word	0x08000ccb
 8000c3c:	08000ccb 	.word	0x08000ccb
 8000c40:	08000ccb 	.word	0x08000ccb
 8000c44:	08000ccb 	.word	0x08000ccb
 8000c48:	08000ccb 	.word	0x08000ccb
 8000c4c:	08000ccb 	.word	0x08000ccb
 8000c50:	08000ccb 	.word	0x08000ccb
 8000c54:	08000ccb 	.word	0x08000ccb
 8000c58:	08000ccb 	.word	0x08000ccb
 8000c5c:	08000ccb 	.word	0x08000ccb
 8000c60:	08000c79 	.word	0x08000c79
 8000c64:	08000c8d 	.word	0x08000c8d
 8000c68:	4a79      	ldr	r2, [pc, #484]	; (8000e50 <HAL_GPIO_Init+0x2b4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d013      	beq.n	8000c96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6e:	e02c      	b.n	8000cca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	623b      	str	r3, [r7, #32]
          break;
 8000c76:	e029      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e024      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	3308      	adds	r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e01f      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	330c      	adds	r3, #12
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e01a      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	623b      	str	r3, [r7, #32]
          break;
 8000ca2:	e013      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d105      	bne.n	8000cb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	611a      	str	r2, [r3, #16]
          break;
 8000cb6:	e009      	b.n	8000ccc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb8:	2308      	movs	r3, #8
 8000cba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69fa      	ldr	r2, [r7, #28]
 8000cc0:	615a      	str	r2, [r3, #20]
          break;
 8000cc2:	e003      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e000      	b.n	8000ccc <HAL_GPIO_Init+0x130>
          break;
 8000cca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	2bff      	cmp	r3, #255	; 0xff
 8000cd0:	d801      	bhi.n	8000cd6 <HAL_GPIO_Init+0x13a>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_Init+0x13e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	2bff      	cmp	r3, #255	; 0xff
 8000ce0:	d802      	bhi.n	8000ce8 <HAL_GPIO_Init+0x14c>
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	e002      	b.n	8000cee <HAL_GPIO_Init+0x152>
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	3b08      	subs	r3, #8
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	6a39      	ldr	r1, [r7, #32]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a4c      	ldr	r2, [pc, #304]	; (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <HAL_GPIO_Init+0x2b8>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d34:	4a48      	ldr	r2, [pc, #288]	; (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a40      	ldr	r2, [pc, #256]	; (8000e5c <HAL_GPIO_Init+0x2c0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d013      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3f      	ldr	r2, [pc, #252]	; (8000e60 <HAL_GPIO_Init+0x2c4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3e      	ldr	r2, [pc, #248]	; (8000e64 <HAL_GPIO_Init+0x2c8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3d      	ldr	r2, [pc, #244]	; (8000e68 <HAL_GPIO_Init+0x2cc>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1e0>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x1ee>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9a:	492f      	ldr	r1, [pc, #188]	; (8000e58 <HAL_GPIO_Init+0x2bc>)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	3302      	adds	r3, #2
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d006      	beq.n	8000dc2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	492c      	ldr	r1, [pc, #176]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	4928      	ldr	r1, [pc, #160]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d006      	beq.n	8000dea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	4922      	ldr	r1, [pc, #136]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	604b      	str	r3, [r1, #4]
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	491e      	ldr	r1, [pc, #120]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e04:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	4918      	ldr	r1, [pc, #96]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	608b      	str	r3, [r1, #8]
 8000e10:	e006      	b.n	8000e20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4914      	ldr	r1, [pc, #80]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d021      	beq.n	8000e70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	490e      	ldr	r1, [pc, #56]	; (8000e6c <HAL_GPIO_Init+0x2d0>)
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60cb      	str	r3, [r1, #12]
 8000e38:	e021      	b.n	8000e7e <HAL_GPIO_Init+0x2e2>
 8000e3a:	bf00      	nop
 8000e3c:	10320000 	.word	0x10320000
 8000e40:	10310000 	.word	0x10310000
 8000e44:	10220000 	.word	0x10220000
 8000e48:	10210000 	.word	0x10210000
 8000e4c:	10120000 	.word	0x10120000
 8000e50:	10110000 	.word	0x10110000
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4909      	ldr	r1, [pc, #36]	; (8000ea0 <HAL_GPIO_Init+0x304>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e80:	3301      	adds	r3, #1
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f47f ae8e 	bne.w	8000bb0 <HAL_GPIO_Init+0x14>
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	372c      	adds	r7, #44	; 0x2c
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e001      	b.n	8000ec6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ee2:	787b      	ldrb	r3, [r7, #1]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ee8:	887a      	ldrh	r2, [r7, #2]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eee:	e003      	b.n	8000ef8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	041a      	lsls	r2, r3, #16
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	611a      	str	r2, [r3, #16]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e272      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 8087 	beq.w	8001032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f24:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d00c      	beq.n	8000f4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f30:	4b8f      	ldr	r3, [pc, #572]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 030c 	and.w	r3, r3, #12
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d112      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
 8000f3c:	4b8c      	ldr	r3, [pc, #560]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f48:	d10b      	bne.n	8000f62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	4b89      	ldr	r3, [pc, #548]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d06c      	beq.n	8001030 <HAL_RCC_OscConfig+0x12c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d168      	bne.n	8001030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e24c      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x76>
 8000f6c:	4b80      	ldr	r3, [pc, #512]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a7f      	ldr	r2, [pc, #508]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	e02e      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x98>
 8000f82:	4b7b      	ldr	r3, [pc, #492]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a7a      	ldr	r2, [pc, #488]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8c:	6013      	str	r3, [r2, #0]
 8000f8e:	4b78      	ldr	r3, [pc, #480]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a77      	ldr	r2, [pc, #476]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e01d      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xbc>
 8000fa6:	4b72      	ldr	r3, [pc, #456]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a71      	ldr	r2, [pc, #452]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0xd4>
 8000fc0:	4b6b      	ldr	r3, [pc, #428]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a6a      	ldr	r2, [pc, #424]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b68      	ldr	r3, [pc, #416]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a67      	ldr	r2, [pc, #412]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fcca 	bl	8000978 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcc6 	bl	8000978 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e200      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe4>
 8001006:	e014      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fcb6 	bl	8000978 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fcb2 	bl	8000978 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1ec      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0x10c>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 030c 	and.w	r3, r3, #12
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11c      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1c0      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4939      	ldr	r1, [pc, #228]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e03a      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff fc6b 	bl	8000978 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fc67 	bl	8000978 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1a1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4927      	ldr	r1, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <HAL_RCC_OscConfig+0x270>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc4a 	bl	8000978 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc46 	bl	8000978 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e180      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d03a      	beq.n	8001188 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d019      	beq.n	800114e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001120:	f7ff fc2a 	bl	8000978 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fc26 	bl	8000978 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e160      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x26c>)
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f000 faa6 	bl	8001698 <RCC_Delay>
 800114c:	e01c      	b.n	8001188 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_RCC_OscConfig+0x274>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001154:	f7ff fc10 	bl	8000978 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800115a:	e00f      	b.n	800117c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800115c:	f7ff fc0c 	bl	8000978 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d908      	bls.n	800117c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e146      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	42420000 	.word	0x42420000
 8001178:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1e9      	bne.n	800115c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a6 	beq.w	80012e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10d      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a87      	ldr	r2, [pc, #540]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b85      	ldr	r3, [pc, #532]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011be:	2301      	movs	r3, #1
 80011c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d118      	bne.n	8001200 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011da:	f7ff fbcd 	bl	8000978 <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7ff fbc9 	bl	8000978 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b64      	cmp	r3, #100	; 0x64
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e103      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f4:	4b75      	ldr	r3, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x4c8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x312>
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	e02d      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x334>
 800121e:	4b6a      	ldr	r3, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	4a69      	ldr	r2, [pc, #420]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	f023 0301 	bic.w	r3, r3, #1
 8001228:	6213      	str	r3, [r2, #32]
 800122a:	4b67      	ldr	r3, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	4a66      	ldr	r2, [pc, #408]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	6213      	str	r3, [r2, #32]
 8001236:	e01c      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d10c      	bne.n	800125a <HAL_RCC_OscConfig+0x356>
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a60      	ldr	r2, [pc, #384]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	4b5e      	ldr	r3, [pc, #376]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	4a5d      	ldr	r2, [pc, #372]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6213      	str	r3, [r2, #32]
 8001258:	e00b      	b.n	8001272 <HAL_RCC_OscConfig+0x36e>
 800125a:	4b5b      	ldr	r3, [pc, #364]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4a5a      	ldr	r2, [pc, #360]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6213      	str	r3, [r2, #32]
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	4a57      	ldr	r2, [pc, #348]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800126c:	f023 0304 	bic.w	r3, r3, #4
 8001270:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127a:	f7ff fb7d 	bl	8000978 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fb79 	bl	8000978 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0b1      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d0ee      	beq.n	8001282 <HAL_RCC_OscConfig+0x37e>
 80012a4:	e014      	b.n	80012d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb67 	bl	8000978 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb63 	bl	8000978 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e09b      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1ee      	bne.n	80012ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d105      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d6:	4b3c      	ldr	r3, [pc, #240]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a3b      	ldr	r2, [pc, #236]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8087 	beq.w	80013fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d061      	beq.n	80013bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d146      	bne.n	800138e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb37 	bl	8000978 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff fb33 	bl	8000978 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e06d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d108      	bne.n	8001348 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	4921      	ldr	r1, [pc, #132]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a19      	ldr	r1, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	430b      	orrs	r3, r1
 800135a:	491b      	ldr	r1, [pc, #108]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb07 	bl	8000978 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fb03 	bl	8000978 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e03d      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x46a>
 800138c:	e035      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_RCC_OscConfig+0x4cc>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff faf0 	bl	8000978 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff faec 	bl	8000978 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e026      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x498>
 80013ba:	e01e      	b.n	80013fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d107      	bne.n	80013d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e019      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40007000 	.word	0x40007000
 80013d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_RCC_OscConfig+0x500>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0d0      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800141c:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d910      	bls.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142a:	4b67      	ldr	r3, [pc, #412]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0207 	bic.w	r2, r3, #7
 8001432:	4965      	ldr	r1, [pc, #404]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143a:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d001      	beq.n	800144c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0b8      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001464:	4b59      	ldr	r3, [pc, #356]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a58      	ldr	r2, [pc, #352]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800146e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800147c:	4b53      	ldr	r3, [pc, #332]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	4b50      	ldr	r3, [pc, #320]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	494d      	ldr	r1, [pc, #308]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d040      	beq.n	8001528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d115      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e07f      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e073      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06b      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 0203 	bic.w	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4936      	ldr	r1, [pc, #216]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014f8:	f7ff fa3e 	bl	8000978 <HAL_GetTick>
 80014fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fe:	e00a      	b.n	8001516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001500:	f7ff fa3a 	bl	8000978 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	f241 3288 	movw	r2, #5000	; 0x1388
 800150e:	4293      	cmp	r3, r2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e053      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 020c 	and.w	r2, r3, #12
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	429a      	cmp	r2, r3
 8001526:	d1eb      	bne.n	8001500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d210      	bcs.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4922      	ldr	r1, [pc, #136]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e032      	b.n	80015be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4916      	ldr	r1, [pc, #88]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	4313      	orrs	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	490e      	ldr	r1, [pc, #56]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001596:	f000 f821 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 800159a:	4602      	mov	r2, r0
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x1c8>)
 80015a8:	5ccb      	ldrb	r3, [r1, r3]
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_RCC_ClockConfig+0x1cc>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_ClockConfig+0x1d0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f99c 	bl	80008f4 <HAL_InitTick>

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40022000 	.word	0x40022000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08002a20 	.word	0x08002a20
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000004 	.word	0x20000004

080015dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b490      	push	{r4, r7}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <HAL_RCC_GetSysClockFreq+0xac>)
 80015e4:	1d3c      	adds	r4, r7, #4
 80015e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015ec:	f240 2301 	movw	r3, #513	; 0x201
 80015f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x40>
 8001616:	2b08      	cmp	r3, #8
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x46>
 800161a:	e02b      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161e:	623b      	str	r3, [r7, #32]
      break;
 8001620:	e02b      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3328      	adds	r3, #40	; 0x28
 800162c:	443b      	add	r3, r7
 800162e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001632:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d012      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0c5b      	lsrs	r3, r3, #17
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	3328      	adds	r3, #40	; 0x28
 800164a:	443b      	add	r3, r7
 800164c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001650:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001656:	fb03 f202 	mul.w	r2, r3, r2
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
 8001662:	e004      	b.n	800166e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	623b      	str	r3, [r7, #32]
      break;
 8001672:	e002      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001676:	623b      	str	r3, [r7, #32]
      break;
 8001678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167a:	6a3b      	ldr	r3, [r7, #32]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bc90      	pop	{r4, r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	08002a00 	.word	0x08002a00
 800168c:	40021000 	.word	0x40021000
 8001690:	007a1200 	.word	0x007a1200
 8001694:	003d0900 	.word	0x003d0900

08001698 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <RCC_Delay+0x34>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <RCC_Delay+0x38>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	0a5b      	lsrs	r3, r3, #9
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016b4:	bf00      	nop
  }
  while (Delay --);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <RCC_Delay+0x1c>
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000
 80016d0:	10624dd3 	.word	0x10624dd3

080016d4 <keypad_init>:
#include "stm32f1xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <keypad_init+0x14c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	4a50      	ldr	r2, [pc, #320]	; (8001820 <keypad_init+0x14c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6193      	str	r3, [r2, #24]
 80016e6:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <keypad_init+0x14c>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b4b      	ldr	r3, [pc, #300]	; (8001820 <keypad_init+0x14c>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <keypad_init+0x14c>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6193      	str	r3, [r2, #24]
 80016fe:	4b48      	ldr	r3, [pc, #288]	; (8001820 <keypad_init+0x14c>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2302      	movs	r3, #2
 8001718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4619      	mov	r1, r3
 8001720:	4840      	ldr	r0, [pc, #256]	; (8001824 <keypad_init+0x150>)
 8001722:	f7ff fa3b 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2302      	movs	r3, #2
 8001736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	4619      	mov	r1, r3
 800173e:	4839      	ldr	r0, [pc, #228]	; (8001824 <keypad_init+0x150>)
 8001740:	f7ff fa2c 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 8001744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2302      	movs	r3, #2
 8001754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4619      	mov	r1, r3
 800175c:	4831      	ldr	r0, [pc, #196]	; (8001824 <keypad_init+0x150>)
 800175e:	f7ff fa1d 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 8001762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	482a      	ldr	r0, [pc, #168]	; (8001824 <keypad_init+0x150>)
 800177c:	f7ff fa0e 	bl	8000b9c <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	4827      	ldr	r0, [pc, #156]	; (8001824 <keypad_init+0x150>)
 8001786:	f7ff fba4 	bl	8000ed2 <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4824      	ldr	r0, [pc, #144]	; (8001824 <keypad_init+0x150>)
 8001792:	f7ff fb9e 	bl	8000ed2 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179c:	4821      	ldr	r0, [pc, #132]	; (8001824 <keypad_init+0x150>)
 800179e:	f7ff fb98 	bl	8000ed2 <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017a8:	481e      	ldr	r0, [pc, #120]	; (8001824 <keypad_init+0x150>)
 80017aa:	f7ff fb92 	bl	8000ed2 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 80017ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	4818      	ldr	r0, [pc, #96]	; (8001824 <keypad_init+0x150>)
 80017c4:	f7ff f9ea 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4619      	mov	r1, r3
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <keypad_init+0x150>)
 80017de:	f7ff f9dd 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	4619      	mov	r1, r3
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <keypad_init+0x150>)
 80017f8:	f7ff f9d0 	bl	8000b9c <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 80017fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001806:	2301      	movs	r3, #1
 8001808:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <keypad_init+0x150>)
 8001812:	f7ff f9c3 	bl	8000b9c <HAL_GPIO_Init>
		
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	40010c00 	.word	0x40010c00

08001828 <keypad_read>:

char keypad_read(void){
 8001828:	b590      	push	{r4, r7, lr}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 800182e:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <keypad_read+0x280>)
 8001830:	463c      	mov	r4, r7
 8001832:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
										{'4','5','6','B'},
										{'7','8','9','C'},
										{'*','0','#','D'}};
	int  i=0;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
	char valor=0;
 800183c:	2300      	movs	r3, #0
 800183e:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e126      	b.n	8001a94 <keypad_read+0x26c>
		if(i==0){
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d145      	bne.n	80018d8 <keypad_read+0xb0>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001852:	4896      	ldr	r0, [pc, #600]	; (8001aac <keypad_read+0x284>)
 8001854:	f7ff fb3d 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185e:	4893      	ldr	r0, [pc, #588]	; (8001aac <keypad_read+0x284>)
 8001860:	f7ff fb37 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186a:	4890      	ldr	r0, [pc, #576]	; (8001aac <keypad_read+0x284>)
 800186c:	f7ff fb31 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 8001870:	2200      	movs	r2, #0
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	488d      	ldr	r0, [pc, #564]	; (8001aac <keypad_read+0x284>)
 8001876:	f7ff fb2c 	bl	8000ed2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f7ff f886 	bl	800098c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 8001880:	e001      	b.n	8001886 <keypad_read+0x5e>
 8001882:	783b      	ldrb	r3, [r7, #0]
 8001884:	74fb      	strb	r3, [r7, #19]
 8001886:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800188a:	4888      	ldr	r0, [pc, #544]	; (8001aac <keypad_read+0x284>)
 800188c:	f7ff fb0a 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f5      	beq.n	8001882 <keypad_read+0x5a>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 8001896:	e001      	b.n	800189c <keypad_read+0x74>
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	74fb      	strb	r3, [r7, #19]
 800189c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a0:	4882      	ldr	r0, [pc, #520]	; (8001aac <keypad_read+0x284>)
 80018a2:	f7ff faff 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f5      	beq.n	8001898 <keypad_read+0x70>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 80018ac:	e001      	b.n	80018b2 <keypad_read+0x8a>
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	74fb      	strb	r3, [r7, #19]
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	487d      	ldr	r0, [pc, #500]	; (8001aac <keypad_read+0x284>)
 80018b8:	f7ff faf4 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f5      	beq.n	80018ae <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 80018c2:	e001      	b.n	80018c8 <keypad_read+0xa0>
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	74fb      	strb	r3, [r7, #19]
 80018c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018cc:	4877      	ldr	r0, [pc, #476]	; (8001aac <keypad_read+0x284>)
 80018ce:	f7ff fae9 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f5      	beq.n	80018c4 <keypad_read+0x9c>
		}

		if(i==1){
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d145      	bne.n	800196a <keypad_read+0x142>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	4872      	ldr	r0, [pc, #456]	; (8001aac <keypad_read+0x284>)
 80018e4:	f7ff faf5 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ee:	486f      	ldr	r0, [pc, #444]	; (8001aac <keypad_read+0x284>)
 80018f0:	f7ff faef 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fa:	486c      	ldr	r0, [pc, #432]	; (8001aac <keypad_read+0x284>)
 80018fc:	f7ff fae9 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001906:	4869      	ldr	r0, [pc, #420]	; (8001aac <keypad_read+0x284>)
 8001908:	f7ff fae3 	bl	8000ed2 <HAL_GPIO_WritePin>

			HAL_Delay(10);
 800190c:	200a      	movs	r0, #10
 800190e:	f7ff f83d 	bl	800098c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 8001912:	e001      	b.n	8001918 <keypad_read+0xf0>
 8001914:	793b      	ldrb	r3, [r7, #4]
 8001916:	74fb      	strb	r3, [r7, #19]
 8001918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191c:	4863      	ldr	r0, [pc, #396]	; (8001aac <keypad_read+0x284>)
 800191e:	f7ff fac1 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f5      	beq.n	8001914 <keypad_read+0xec>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 8001928:	e001      	b.n	800192e <keypad_read+0x106>
 800192a:	797b      	ldrb	r3, [r7, #5]
 800192c:	74fb      	strb	r3, [r7, #19]
 800192e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001932:	485e      	ldr	r0, [pc, #376]	; (8001aac <keypad_read+0x284>)
 8001934:	f7ff fab6 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f5      	beq.n	800192a <keypad_read+0x102>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 800193e:	e001      	b.n	8001944 <keypad_read+0x11c>
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	74fb      	strb	r3, [r7, #19]
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	4858      	ldr	r0, [pc, #352]	; (8001aac <keypad_read+0x284>)
 800194a:	f7ff faab 	bl	8000ea4 <HAL_GPIO_ReadPin>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f5      	beq.n	8001940 <keypad_read+0x118>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8001954:	e001      	b.n	800195a <keypad_read+0x132>
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	74fb      	strb	r3, [r7, #19]
 800195a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800195e:	4853      	ldr	r0, [pc, #332]	; (8001aac <keypad_read+0x284>)
 8001960:	f7ff faa0 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f5      	beq.n	8001956 <keypad_read+0x12e>
		}

		if(i==2){
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d145      	bne.n	80019fc <keypad_read+0x1d4>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	484d      	ldr	r0, [pc, #308]	; (8001aac <keypad_read+0x284>)
 8001976:	f7ff faac 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001980:	484a      	ldr	r0, [pc, #296]	; (8001aac <keypad_read+0x284>)
 8001982:	f7ff faa6 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800198c:	4847      	ldr	r0, [pc, #284]	; (8001aac <keypad_read+0x284>)
 800198e:	f7ff faa0 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001998:	4844      	ldr	r0, [pc, #272]	; (8001aac <keypad_read+0x284>)
 800199a:	f7ff fa9a 	bl	8000ed2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800199e:	200a      	movs	r0, #10
 80019a0:	f7fe fff4 	bl	800098c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 80019a4:	e001      	b.n	80019aa <keypad_read+0x182>
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	74fb      	strb	r3, [r7, #19]
 80019aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ae:	483f      	ldr	r0, [pc, #252]	; (8001aac <keypad_read+0x284>)
 80019b0:	f7ff fa78 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f5      	beq.n	80019a6 <keypad_read+0x17e>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 80019ba:	e001      	b.n	80019c0 <keypad_read+0x198>
 80019bc:	7a7b      	ldrb	r3, [r7, #9]
 80019be:	74fb      	strb	r3, [r7, #19]
 80019c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019c4:	4839      	ldr	r0, [pc, #228]	; (8001aac <keypad_read+0x284>)
 80019c6:	f7ff fa6d 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f5      	beq.n	80019bc <keypad_read+0x194>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 80019d0:	e001      	b.n	80019d6 <keypad_read+0x1ae>
 80019d2:	7abb      	ldrb	r3, [r7, #10]
 80019d4:	74fb      	strb	r3, [r7, #19]
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	4834      	ldr	r0, [pc, #208]	; (8001aac <keypad_read+0x284>)
 80019dc:	f7ff fa62 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f5      	beq.n	80019d2 <keypad_read+0x1aa>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 80019e6:	e001      	b.n	80019ec <keypad_read+0x1c4>
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	74fb      	strb	r3, [r7, #19]
 80019ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019f0:	482e      	ldr	r0, [pc, #184]	; (8001aac <keypad_read+0x284>)
 80019f2:	f7ff fa57 	bl	8000ea4 <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f5      	beq.n	80019e8 <keypad_read+0x1c0>
		}

		if(i==3){
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d145      	bne.n	8001a8e <keypad_read+0x266>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 8001a02:	2201      	movs	r2, #1
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	4829      	ldr	r0, [pc, #164]	; (8001aac <keypad_read+0x284>)
 8001a08:	f7ff fa63 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a12:	4826      	ldr	r0, [pc, #152]	; (8001aac <keypad_read+0x284>)
 8001a14:	f7ff fa5d 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1e:	4823      	ldr	r0, [pc, #140]	; (8001aac <keypad_read+0x284>)
 8001a20:	f7ff fa57 	bl	8000ed2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2a:	4820      	ldr	r0, [pc, #128]	; (8001aac <keypad_read+0x284>)
 8001a2c:	f7ff fa51 	bl	8000ed2 <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001a30:	200a      	movs	r0, #10
 8001a32:	f7fe ffab 	bl	800098c <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8001a36:	e001      	b.n	8001a3c <keypad_read+0x214>
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	74fb      	strb	r3, [r7, #19]
 8001a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <keypad_read+0x284>)
 8001a42:	f7ff fa2f 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f5      	beq.n	8001a38 <keypad_read+0x210>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8001a4c:	e001      	b.n	8001a52 <keypad_read+0x22a>
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	74fb      	strb	r3, [r7, #19]
 8001a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a56:	4815      	ldr	r0, [pc, #84]	; (8001aac <keypad_read+0x284>)
 8001a58:	f7ff fa24 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f5      	beq.n	8001a4e <keypad_read+0x226>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 8001a62:	e001      	b.n	8001a68 <keypad_read+0x240>
 8001a64:	7bbb      	ldrb	r3, [r7, #14]
 8001a66:	74fb      	strb	r3, [r7, #19]
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	480f      	ldr	r0, [pc, #60]	; (8001aac <keypad_read+0x284>)
 8001a6e:	f7ff fa19 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f5      	beq.n	8001a64 <keypad_read+0x23c>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 8001a78:	e001      	b.n	8001a7e <keypad_read+0x256>
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	74fb      	strb	r3, [r7, #19]
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	480a      	ldr	r0, [pc, #40]	; (8001aac <keypad_read+0x284>)
 8001a84:	f7ff fa0e 	bl	8000ea4 <HAL_GPIO_ReadPin>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f5      	beq.n	8001a7a <keypad_read+0x252>
	for(i=0;i<4;i++){
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3301      	adds	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	f77f aed5 	ble.w	8001846 <keypad_read+0x1e>
		}
	}
	
	return valor;
 8001a9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08002a10 	.word	0x08002a10
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <lcd_init>:

		return ch;
}
*/
void lcd_init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b90      	ldr	r3, [pc, #576]	; (8001cf8 <lcd_init+0x248>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a8f      	ldr	r2, [pc, #572]	; (8001cf8 <lcd_init+0x248>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <lcd_init+0x248>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	4b8a      	ldr	r3, [pc, #552]	; (8001cf8 <lcd_init+0x248>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a89      	ldr	r2, [pc, #548]	; (8001cf8 <lcd_init+0x248>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <lcd_init+0x248>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b84      	ldr	r3, [pc, #528]	; (8001cf8 <lcd_init+0x248>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a83      	ldr	r2, [pc, #524]	; (8001cf8 <lcd_init+0x248>)
 8001aec:	f043 0310 	orr.w	r3, r3, #16
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <lcd_init+0x248>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	= LCDRS_PIN;
 8001afe:	2320      	movs	r3, #32
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDRS_PORT, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	4879      	ldr	r0, [pc, #484]	; (8001cfc <lcd_init+0x24c>)
 8001b16:	f7ff f841 	bl	8000b9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCDE_PIN;
 8001b1a:	2310      	movs	r3, #16
 8001b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDE_PORT, &GPIO_InitStruct);
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4872      	ldr	r0, [pc, #456]	; (8001cfc <lcd_init+0x24c>)
 8001b32:	f7ff f833 	bl	8000b9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD4_PIN;
 8001b36:	2308      	movs	r3, #8
 8001b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD4_PORT, &GPIO_InitStruct);
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	486c      	ldr	r0, [pc, #432]	; (8001d00 <lcd_init+0x250>)
 8001b4e:	f7ff f825 	bl	8000b9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD5_PIN;
 8001b52:	2310      	movs	r3, #16
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD5_PORT, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	4865      	ldr	r0, [pc, #404]	; (8001d00 <lcd_init+0x250>)
 8001b6a:	f7ff f817 	bl	8000b9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD6_PIN;
 8001b6e:	2320      	movs	r3, #32
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD6_PORT, &GPIO_InitStruct);
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4619      	mov	r1, r3
 8001b84:	485e      	ldr	r0, [pc, #376]	; (8001d00 <lcd_init+0x250>)
 8001b86:	f7ff f809 	bl	8000b9c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD7_PIN;
 8001b8a:	2340      	movs	r3, #64	; 0x40
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD7_PORT, &GPIO_InitStruct);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4857      	ldr	r0, [pc, #348]	; (8001d00 <lcd_init+0x250>)
 8001ba2:	f7fe fffb 	bl	8000b9c <HAL_GPIO_Init>

	HAL_Delay(15);
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f7fe fef0 	bl	800098c <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 8001bac:	2200      	movs	r2, #0
 8001bae:	2140      	movs	r1, #64	; 0x40
 8001bb0:	4853      	ldr	r0, [pc, #332]	; (8001d00 <lcd_init+0x250>)
 8001bb2:	f7ff f98e 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4851      	ldr	r0, [pc, #324]	; (8001d00 <lcd_init+0x250>)
 8001bbc:	f7ff f989 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	484e      	ldr	r0, [pc, #312]	; (8001d00 <lcd_init+0x250>)
 8001bc6:	f7ff f984 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2108      	movs	r1, #8
 8001bce:	484c      	ldr	r0, [pc, #304]	; (8001d00 <lcd_init+0x250>)
 8001bd0:	f7ff f97f 	bl	8000ed2 <HAL_GPIO_WritePin>
	LCDE_OFF;
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	4848      	ldr	r0, [pc, #288]	; (8001cfc <lcd_init+0x24c>)
 8001bda:	f7ff f97a 	bl	8000ed2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	4846      	ldr	r0, [pc, #280]	; (8001cfc <lcd_init+0x24c>)
 8001be4:	f7ff f975 	bl	8000ed2 <HAL_GPIO_WritePin>
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8001be8:	2200      	movs	r2, #0
 8001bea:	2140      	movs	r1, #64	; 0x40
 8001bec:	4844      	ldr	r0, [pc, #272]	; (8001d00 <lcd_init+0x250>)
 8001bee:	f7ff f970 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2120      	movs	r1, #32
 8001bf6:	4842      	ldr	r0, [pc, #264]	; (8001d00 <lcd_init+0x250>)
 8001bf8:	f7ff f96b 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2110      	movs	r1, #16
 8001c00:	483f      	ldr	r0, [pc, #252]	; (8001d00 <lcd_init+0x250>)
 8001c02:	f7ff f966 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001c06:	2201      	movs	r2, #1
 8001c08:	2108      	movs	r1, #8
 8001c0a:	483d      	ldr	r0, [pc, #244]	; (8001d00 <lcd_init+0x250>)
 8001c0c:	f7ff f961 	bl	8000ed2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8001c10:	2201      	movs	r2, #1
 8001c12:	2110      	movs	r1, #16
 8001c14:	4839      	ldr	r0, [pc, #228]	; (8001cfc <lcd_init+0x24c>)
 8001c16:	f7ff f95c 	bl	8000ed2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2120      	movs	r1, #32
 8001c1e:	4837      	ldr	r0, [pc, #220]	; (8001cfc <lcd_init+0x24c>)
 8001c20:	f7ff f957 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f7fe feb1 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <lcd_init+0x24c>)
 8001c30:	f7ff f94f 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c34:	200a      	movs	r0, #10
 8001c36:	f7fe fea9 	bl	800098c <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	; 0x40
 8001c3e:	4830      	ldr	r0, [pc, #192]	; (8001d00 <lcd_init+0x250>)
 8001c40:	f7ff f947 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001c44:	2200      	movs	r2, #0
 8001c46:	2120      	movs	r1, #32
 8001c48:	482d      	ldr	r0, [pc, #180]	; (8001d00 <lcd_init+0x250>)
 8001c4a:	f7ff f942 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2110      	movs	r1, #16
 8001c52:	482b      	ldr	r0, [pc, #172]	; (8001d00 <lcd_init+0x250>)
 8001c54:	f7ff f93d 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001c58:	2201      	movs	r2, #1
 8001c5a:	2108      	movs	r1, #8
 8001c5c:	4828      	ldr	r0, [pc, #160]	; (8001d00 <lcd_init+0x250>)
 8001c5e:	f7ff f938 	bl	8000ed2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8001c62:	2201      	movs	r2, #1
 8001c64:	2110      	movs	r1, #16
 8001c66:	4825      	ldr	r0, [pc, #148]	; (8001cfc <lcd_init+0x24c>)
 8001c68:	f7ff f933 	bl	8000ed2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2120      	movs	r1, #32
 8001c70:	4822      	ldr	r0, [pc, #136]	; (8001cfc <lcd_init+0x24c>)
 8001c72:	f7ff f92e 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c76:	200a      	movs	r0, #10
 8001c78:	f7fe fe88 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2110      	movs	r1, #16
 8001c80:	481e      	ldr	r0, [pc, #120]	; (8001cfc <lcd_init+0x24c>)
 8001c82:	f7ff f926 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f7fe fe80 	bl	800098c <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	481b      	ldr	r0, [pc, #108]	; (8001d00 <lcd_init+0x250>)
 8001c92:	f7ff f91e 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001c96:	2200      	movs	r2, #0
 8001c98:	2120      	movs	r1, #32
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <lcd_init+0x250>)
 8001c9c:	f7ff f919 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	4816      	ldr	r0, [pc, #88]	; (8001d00 <lcd_init+0x250>)
 8001ca6:	f7ff f914 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001caa:	2200      	movs	r2, #0
 8001cac:	2108      	movs	r1, #8
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <lcd_init+0x250>)
 8001cb0:	f7ff f90f 	bl	8000ed2 <HAL_GPIO_WritePin>
	LCDE_ON;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4810      	ldr	r0, [pc, #64]	; (8001cfc <lcd_init+0x24c>)
 8001cba:	f7ff f90a 	bl	8000ed2 <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	480e      	ldr	r0, [pc, #56]	; (8001cfc <lcd_init+0x24c>)
 8001cc4:	f7ff f905 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001cc8:	200a      	movs	r0, #10
 8001cca:	f7fe fe5f 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	480a      	ldr	r0, [pc, #40]	; (8001cfc <lcd_init+0x24c>)
 8001cd4:	f7ff f8fd 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001cd8:	200a      	movs	r0, #10
 8001cda:	f7fe fe57 	bl	800098c <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8001cde:	2028      	movs	r0, #40	; 0x28
 8001ce0:	f000 f8c2 	bl	8001e68 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 8001ce4:	200c      	movs	r0, #12
 8001ce6:	f000 f8bf 	bl	8001e68 <lcd_command>
	//-----Clear display
	lcd_clear();
 8001cea:	f000 f9bf 	bl	800206c <lcd_clear>
}
 8001cee:	bf00      	nop
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010800 	.word	0x40010800
 8001d00:	40010c00 	.word	0x40010c00

08001d04 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2120      	movs	r1, #32
 8001d12:	4853      	ldr	r0, [pc, #332]	; (8001e60 <lcd_putc+0x15c>)
 8001d14:	f7ff f8dd 	bl	8000ed2 <HAL_GPIO_WritePin>

  if ( ch & 0x10 ) {
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <lcd_putc+0x2a>
		LCD4_ON;
 8001d22:	2201      	movs	r2, #1
 8001d24:	2108      	movs	r1, #8
 8001d26:	484f      	ldr	r0, [pc, #316]	; (8001e64 <lcd_putc+0x160>)
 8001d28:	f7ff f8d3 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001d2c:	e004      	b.n	8001d38 <lcd_putc+0x34>
	} else {
		LCD4_OFF;
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2108      	movs	r1, #8
 8001d32:	484c      	ldr	r0, [pc, #304]	; (8001e64 <lcd_putc+0x160>)
 8001d34:	f7ff f8cd 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x20 ) {
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <lcd_putc+0x4a>
		LCD5_ON;
 8001d42:	2201      	movs	r2, #1
 8001d44:	2110      	movs	r1, #16
 8001d46:	4847      	ldr	r0, [pc, #284]	; (8001e64 <lcd_putc+0x160>)
 8001d48:	f7ff f8c3 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001d4c:	e004      	b.n	8001d58 <lcd_putc+0x54>
	} else {
    LCD5_OFF;
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2110      	movs	r1, #16
 8001d52:	4844      	ldr	r0, [pc, #272]	; (8001e64 <lcd_putc+0x160>)
 8001d54:	f7ff f8bd 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x40 ) {
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <lcd_putc+0x6a>
		LCD6_ON;
 8001d62:	2201      	movs	r2, #1
 8001d64:	2120      	movs	r1, #32
 8001d66:	483f      	ldr	r0, [pc, #252]	; (8001e64 <lcd_putc+0x160>)
 8001d68:	f7ff f8b3 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001d6c:	e004      	b.n	8001d78 <lcd_putc+0x74>
	} else {
		LCD6_OFF;
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2120      	movs	r1, #32
 8001d72:	483c      	ldr	r0, [pc, #240]	; (8001e64 <lcd_putc+0x160>)
 8001d74:	f7ff f8ad 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x80 ) {
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da05      	bge.n	8001d8c <lcd_putc+0x88>
		LCD7_ON;
 8001d80:	2201      	movs	r2, #1
 8001d82:	2140      	movs	r1, #64	; 0x40
 8001d84:	4837      	ldr	r0, [pc, #220]	; (8001e64 <lcd_putc+0x160>)
 8001d86:	f7ff f8a4 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001d8a:	e004      	b.n	8001d96 <lcd_putc+0x92>
	} else {
		LCD7_OFF;
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	4834      	ldr	r0, [pc, #208]	; (8001e64 <lcd_putc+0x160>)
 8001d92:	f7ff f89e 	bl	8000ed2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001d96:	2201      	movs	r2, #1
 8001d98:	2110      	movs	r1, #16
 8001d9a:	4831      	ldr	r0, [pc, #196]	; (8001e60 <lcd_putc+0x15c>)
 8001d9c:	f7ff f899 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7fe fdf3 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001da6:	2200      	movs	r2, #0
 8001da8:	2110      	movs	r1, #16
 8001daa:	482d      	ldr	r0, [pc, #180]	; (8001e60 <lcd_putc+0x15c>)
 8001dac:	f7ff f891 	bl	8000ed2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7fe fdeb 	bl	800098c <HAL_Delay>

	if ( ch & 0x01 ) {
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <lcd_putc+0xc8>
		LCD4_ON;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	4827      	ldr	r0, [pc, #156]	; (8001e64 <lcd_putc+0x160>)
 8001dc6:	f7ff f884 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001dca:	e004      	b.n	8001dd6 <lcd_putc+0xd2>
	} else {
		LCD4_OFF;
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4824      	ldr	r0, [pc, #144]	; (8001e64 <lcd_putc+0x160>)
 8001dd2:	f7ff f87e 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x02 ) {
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <lcd_putc+0xe8>
		LCD5_ON;
 8001de0:	2201      	movs	r2, #1
 8001de2:	2110      	movs	r1, #16
 8001de4:	481f      	ldr	r0, [pc, #124]	; (8001e64 <lcd_putc+0x160>)
 8001de6:	f7ff f874 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001dea:	e004      	b.n	8001df6 <lcd_putc+0xf2>
	} else {
    LCD5_OFF;
 8001dec:	2200      	movs	r2, #0
 8001dee:	2110      	movs	r1, #16
 8001df0:	481c      	ldr	r0, [pc, #112]	; (8001e64 <lcd_putc+0x160>)
 8001df2:	f7ff f86e 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x04 ) {
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <lcd_putc+0x108>
		LCD6_ON;
 8001e00:	2201      	movs	r2, #1
 8001e02:	2120      	movs	r1, #32
 8001e04:	4817      	ldr	r0, [pc, #92]	; (8001e64 <lcd_putc+0x160>)
 8001e06:	f7ff f864 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001e0a:	e004      	b.n	8001e16 <lcd_putc+0x112>
	} else {
    LCD6_OFF;
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2120      	movs	r1, #32
 8001e10:	4814      	ldr	r0, [pc, #80]	; (8001e64 <lcd_putc+0x160>)
 8001e12:	f7ff f85e 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( ch & 0x08 ) {
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <lcd_putc+0x128>
		LCD7_ON;
 8001e20:	2201      	movs	r2, #1
 8001e22:	2140      	movs	r1, #64	; 0x40
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <lcd_putc+0x160>)
 8001e26:	f7ff f854 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001e2a:	e004      	b.n	8001e36 <lcd_putc+0x132>
	} else {
    LCD7_OFF;
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2140      	movs	r1, #64	; 0x40
 8001e30:	480c      	ldr	r0, [pc, #48]	; (8001e64 <lcd_putc+0x160>)
 8001e32:	f7ff f84e 	bl	8000ed2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001e36:	2201      	movs	r2, #1
 8001e38:	2110      	movs	r1, #16
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <lcd_putc+0x15c>)
 8001e3c:	f7ff f849 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7fe fda3 	bl	800098c <HAL_Delay>
  LCDE_OFF;
 8001e46:	2200      	movs	r2, #0
 8001e48:	2110      	movs	r1, #16
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <lcd_putc+0x15c>)
 8001e4c:	f7ff f841 	bl	8000ed2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7fe fd9b 	bl	800098c <HAL_Delay>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00

08001e68 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8001e72:	2200      	movs	r2, #0
 8001e74:	2120      	movs	r1, #32
 8001e76:	4853      	ldr	r0, [pc, #332]	; (8001fc4 <lcd_command+0x15c>)
 8001e78:	f7ff f82b 	bl	8000ed2 <HAL_GPIO_WritePin>

	if ( cmd & 0x10 ) {
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <lcd_command+0x2a>
		LCD4_ON;
 8001e86:	2201      	movs	r2, #1
 8001e88:	2108      	movs	r1, #8
 8001e8a:	484f      	ldr	r0, [pc, #316]	; (8001fc8 <lcd_command+0x160>)
 8001e8c:	f7ff f821 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001e90:	e004      	b.n	8001e9c <lcd_command+0x34>
	} else {
		LCD4_OFF;
 8001e92:	2200      	movs	r2, #0
 8001e94:	2108      	movs	r1, #8
 8001e96:	484c      	ldr	r0, [pc, #304]	; (8001fc8 <lcd_command+0x160>)
 8001e98:	f7ff f81b 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x20 ) {
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <lcd_command+0x4a>
		LCD5_ON;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4847      	ldr	r0, [pc, #284]	; (8001fc8 <lcd_command+0x160>)
 8001eac:	f7ff f811 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001eb0:	e004      	b.n	8001ebc <lcd_command+0x54>
	} else {
		LCD5_OFF;
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2110      	movs	r1, #16
 8001eb6:	4844      	ldr	r0, [pc, #272]	; (8001fc8 <lcd_command+0x160>)
 8001eb8:	f7ff f80b 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x40 ) {
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <lcd_command+0x6a>
		LCD6_ON;
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2120      	movs	r1, #32
 8001eca:	483f      	ldr	r0, [pc, #252]	; (8001fc8 <lcd_command+0x160>)
 8001ecc:	f7ff f801 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001ed0:	e004      	b.n	8001edc <lcd_command+0x74>
	} else {
		LCD6_OFF;
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	483c      	ldr	r0, [pc, #240]	; (8001fc8 <lcd_command+0x160>)
 8001ed8:	f7fe fffb 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x80 ) {
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da05      	bge.n	8001ef0 <lcd_command+0x88>
		LCD7_ON;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2140      	movs	r1, #64	; 0x40
 8001ee8:	4837      	ldr	r0, [pc, #220]	; (8001fc8 <lcd_command+0x160>)
 8001eea:	f7fe fff2 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001eee:	e004      	b.n	8001efa <lcd_command+0x92>
	} else {
		LCD7_OFF;
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2140      	movs	r1, #64	; 0x40
 8001ef4:	4834      	ldr	r0, [pc, #208]	; (8001fc8 <lcd_command+0x160>)
 8001ef6:	f7fe ffec 	bl	8000ed2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001efa:	2201      	movs	r2, #1
 8001efc:	2110      	movs	r1, #16
 8001efe:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <lcd_command+0x15c>)
 8001f00:	f7fe ffe7 	bl	8000ed2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7fe fd41 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	482d      	ldr	r0, [pc, #180]	; (8001fc4 <lcd_command+0x15c>)
 8001f10:	f7fe ffdf 	bl	8000ed2 <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7fe fd39 	bl	800098c <HAL_Delay>

	if ( cmd & 0x01 ) {
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <lcd_command+0xc8>
		LCD4_ON;
 8001f24:	2201      	movs	r2, #1
 8001f26:	2108      	movs	r1, #8
 8001f28:	4827      	ldr	r0, [pc, #156]	; (8001fc8 <lcd_command+0x160>)
 8001f2a:	f7fe ffd2 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001f2e:	e004      	b.n	8001f3a <lcd_command+0xd2>
	} else {
		LCD4_OFF;
 8001f30:	2200      	movs	r2, #0
 8001f32:	2108      	movs	r1, #8
 8001f34:	4824      	ldr	r0, [pc, #144]	; (8001fc8 <lcd_command+0x160>)
 8001f36:	f7fe ffcc 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x02 ) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <lcd_command+0xe8>
		LCD5_ON;
 8001f44:	2201      	movs	r2, #1
 8001f46:	2110      	movs	r1, #16
 8001f48:	481f      	ldr	r0, [pc, #124]	; (8001fc8 <lcd_command+0x160>)
 8001f4a:	f7fe ffc2 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001f4e:	e004      	b.n	8001f5a <lcd_command+0xf2>
	} else {
		LCD5_OFF;
 8001f50:	2200      	movs	r2, #0
 8001f52:	2110      	movs	r1, #16
 8001f54:	481c      	ldr	r0, [pc, #112]	; (8001fc8 <lcd_command+0x160>)
 8001f56:	f7fe ffbc 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x04 ) {
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <lcd_command+0x108>
		LCD6_ON;
 8001f64:	2201      	movs	r2, #1
 8001f66:	2120      	movs	r1, #32
 8001f68:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <lcd_command+0x160>)
 8001f6a:	f7fe ffb2 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001f6e:	e004      	b.n	8001f7a <lcd_command+0x112>
	} else {
		LCD6_OFF;
 8001f70:	2200      	movs	r2, #0
 8001f72:	2120      	movs	r1, #32
 8001f74:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <lcd_command+0x160>)
 8001f76:	f7fe ffac 	bl	8000ed2 <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x08 ) {
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <lcd_command+0x128>
		LCD7_ON;
 8001f84:	2201      	movs	r2, #1
 8001f86:	2140      	movs	r1, #64	; 0x40
 8001f88:	480f      	ldr	r0, [pc, #60]	; (8001fc8 <lcd_command+0x160>)
 8001f8a:	f7fe ffa2 	bl	8000ed2 <HAL_GPIO_WritePin>
 8001f8e:	e004      	b.n	8001f9a <lcd_command+0x132>
	} else {
		LCD7_OFF;
 8001f90:	2200      	movs	r2, #0
 8001f92:	2140      	movs	r1, #64	; 0x40
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <lcd_command+0x160>)
 8001f96:	f7fe ff9c 	bl	8000ed2 <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	4809      	ldr	r0, [pc, #36]	; (8001fc4 <lcd_command+0x15c>)
 8001fa0:	f7fe ff97 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe fcf1 	bl	800098c <HAL_Delay>
	LCDE_OFF;
 8001faa:	2200      	movs	r2, #0
 8001fac:	2110      	movs	r1, #16
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <lcd_command+0x15c>)
 8001fb0:	f7fe ff8f 	bl	8000ed2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f7fe fce9 	bl	800098c <HAL_Delay>

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00

08001fcc <lcd_puts>:

void lcd_puts(unsigned char* data, unsigned char nBytes){	//Outputs string to LCD
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
	register unsigned char i=0;

	for(i=0; i<nBytes; i++){	// print data
 8001fd8:	2400      	movs	r4, #0
 8001fda:	e009      	b.n	8001ff0 <lcd_puts+0x24>
		lcd_putc(data[i]);
 8001fdc:	4622      	mov	r2, r4
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fe8d 	bl	8001d04 <lcd_putc>
	for(i=0; i<nBytes; i++){	// print data
 8001fea:	4623      	mov	r3, r4
 8001fec:	3301      	adds	r3, #1
 8001fee:	b2dc      	uxtb	r4, r3
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	42a3      	cmp	r3, r4
 8001ff4:	d8f2      	bhi.n	8001fdc <lcd_puts+0x10>
	}
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	460a      	mov	r2, r1
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	4613      	mov	r3, r2
 800200e:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b03      	cmp	r3, #3
 8002016:	d81b      	bhi.n	8002050 <lcd_gotoxy+0x50>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <lcd_gotoxy+0x20>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002039 	.word	0x08002039
 8002028:	08002041 	.word	0x08002041
 800202c:	08002049 	.word	0x08002049
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	3b01      	subs	r3, #1
 8002034:	b2dc      	uxtb	r4, r3
 8002036:	e00f      	b.n	8002058 <lcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	333f      	adds	r3, #63	; 0x3f
 800203c:	b2dc      	uxtb	r4, r3
 800203e:	e00b      	b.n	8002058 <lcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	3313      	adds	r3, #19
 8002044:	b2dc      	uxtb	r4, r3
 8002046:	e007      	b.n	8002058 <lcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	3353      	adds	r3, #83	; 0x53
 800204c:	b2dc      	uxtb	r4, r3
 800204e:	e003      	b.n	8002058 <lcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2dc      	uxtb	r4, r3
 8002056:	bf00      	nop
	}
	lcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 8002058:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff02 	bl	8001e68 <lcd_command>
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}

0800206c <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff fef9 	bl	8001e68 <lcd_command>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <__errno>:
 800207c:	4b01      	ldr	r3, [pc, #4]	; (8002084 <__errno+0x8>)
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000000c 	.word	0x2000000c

08002088 <__libc_init_array>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2600      	movs	r6, #0
 800208c:	4d0c      	ldr	r5, [pc, #48]	; (80020c0 <__libc_init_array+0x38>)
 800208e:	4c0d      	ldr	r4, [pc, #52]	; (80020c4 <__libc_init_array+0x3c>)
 8002090:	1b64      	subs	r4, r4, r5
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	42a6      	cmp	r6, r4
 8002096:	d109      	bne.n	80020ac <__libc_init_array+0x24>
 8002098:	f000 fc9c 	bl	80029d4 <_init>
 800209c:	2600      	movs	r6, #0
 800209e:	4d0a      	ldr	r5, [pc, #40]	; (80020c8 <__libc_init_array+0x40>)
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <__libc_init_array+0x44>)
 80020a2:	1b64      	subs	r4, r4, r5
 80020a4:	10a4      	asrs	r4, r4, #2
 80020a6:	42a6      	cmp	r6, r4
 80020a8:	d105      	bne.n	80020b6 <__libc_init_array+0x2e>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b0:	4798      	blx	r3
 80020b2:	3601      	adds	r6, #1
 80020b4:	e7ee      	b.n	8002094 <__libc_init_array+0xc>
 80020b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ba:	4798      	blx	r3
 80020bc:	3601      	adds	r6, #1
 80020be:	e7f2      	b.n	80020a6 <__libc_init_array+0x1e>
 80020c0:	08002a64 	.word	0x08002a64
 80020c4:	08002a64 	.word	0x08002a64
 80020c8:	08002a64 	.word	0x08002a64
 80020cc:	08002a68 	.word	0x08002a68

080020d0 <memset>:
 80020d0:	4603      	mov	r3, r0
 80020d2:	4402      	add	r2, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <memset+0xa>
 80020d8:	4770      	bx	lr
 80020da:	f803 1b01 	strb.w	r1, [r3], #1
 80020de:	e7f9      	b.n	80020d4 <memset+0x4>

080020e0 <siprintf>:
 80020e0:	b40e      	push	{r1, r2, r3}
 80020e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020e6:	b500      	push	{lr}
 80020e8:	b09c      	sub	sp, #112	; 0x70
 80020ea:	ab1d      	add	r3, sp, #116	; 0x74
 80020ec:	9002      	str	r0, [sp, #8]
 80020ee:	9006      	str	r0, [sp, #24]
 80020f0:	9107      	str	r1, [sp, #28]
 80020f2:	9104      	str	r1, [sp, #16]
 80020f4:	4808      	ldr	r0, [pc, #32]	; (8002118 <siprintf+0x38>)
 80020f6:	4909      	ldr	r1, [pc, #36]	; (800211c <siprintf+0x3c>)
 80020f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020fc:	9105      	str	r1, [sp, #20]
 80020fe:	6800      	ldr	r0, [r0, #0]
 8002100:	a902      	add	r1, sp, #8
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	f000 f868 	bl	80021d8 <_svfiprintf_r>
 8002108:	2200      	movs	r2, #0
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	b01c      	add	sp, #112	; 0x70
 8002110:	f85d eb04 	ldr.w	lr, [sp], #4
 8002114:	b003      	add	sp, #12
 8002116:	4770      	bx	lr
 8002118:	2000000c 	.word	0x2000000c
 800211c:	ffff0208 	.word	0xffff0208

08002120 <__ssputs_r>:
 8002120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002124:	688e      	ldr	r6, [r1, #8]
 8002126:	4682      	mov	sl, r0
 8002128:	429e      	cmp	r6, r3
 800212a:	460c      	mov	r4, r1
 800212c:	4690      	mov	r8, r2
 800212e:	461f      	mov	r7, r3
 8002130:	d838      	bhi.n	80021a4 <__ssputs_r+0x84>
 8002132:	898a      	ldrh	r2, [r1, #12]
 8002134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002138:	d032      	beq.n	80021a0 <__ssputs_r+0x80>
 800213a:	6825      	ldr	r5, [r4, #0]
 800213c:	6909      	ldr	r1, [r1, #16]
 800213e:	3301      	adds	r3, #1
 8002140:	eba5 0901 	sub.w	r9, r5, r1
 8002144:	6965      	ldr	r5, [r4, #20]
 8002146:	444b      	add	r3, r9
 8002148:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800214c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002150:	106d      	asrs	r5, r5, #1
 8002152:	429d      	cmp	r5, r3
 8002154:	bf38      	it	cc
 8002156:	461d      	movcc	r5, r3
 8002158:	0553      	lsls	r3, r2, #21
 800215a:	d531      	bpl.n	80021c0 <__ssputs_r+0xa0>
 800215c:	4629      	mov	r1, r5
 800215e:	f000 fb6f 	bl	8002840 <_malloc_r>
 8002162:	4606      	mov	r6, r0
 8002164:	b950      	cbnz	r0, 800217c <__ssputs_r+0x5c>
 8002166:	230c      	movs	r3, #12
 8002168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800216c:	f8ca 3000 	str.w	r3, [sl]
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002176:	81a3      	strh	r3, [r4, #12]
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217c:	464a      	mov	r2, r9
 800217e:	6921      	ldr	r1, [r4, #16]
 8002180:	f000 face 	bl	8002720 <memcpy>
 8002184:	89a3      	ldrh	r3, [r4, #12]
 8002186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800218a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800218e:	81a3      	strh	r3, [r4, #12]
 8002190:	6126      	str	r6, [r4, #16]
 8002192:	444e      	add	r6, r9
 8002194:	6026      	str	r6, [r4, #0]
 8002196:	463e      	mov	r6, r7
 8002198:	6165      	str	r5, [r4, #20]
 800219a:	eba5 0509 	sub.w	r5, r5, r9
 800219e:	60a5      	str	r5, [r4, #8]
 80021a0:	42be      	cmp	r6, r7
 80021a2:	d900      	bls.n	80021a6 <__ssputs_r+0x86>
 80021a4:	463e      	mov	r6, r7
 80021a6:	4632      	mov	r2, r6
 80021a8:	4641      	mov	r1, r8
 80021aa:	6820      	ldr	r0, [r4, #0]
 80021ac:	f000 fac6 	bl	800273c <memmove>
 80021b0:	68a3      	ldr	r3, [r4, #8]
 80021b2:	2000      	movs	r0, #0
 80021b4:	1b9b      	subs	r3, r3, r6
 80021b6:	60a3      	str	r3, [r4, #8]
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	4433      	add	r3, r6
 80021bc:	6023      	str	r3, [r4, #0]
 80021be:	e7db      	b.n	8002178 <__ssputs_r+0x58>
 80021c0:	462a      	mov	r2, r5
 80021c2:	f000 fbb1 	bl	8002928 <_realloc_r>
 80021c6:	4606      	mov	r6, r0
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d1e1      	bne.n	8002190 <__ssputs_r+0x70>
 80021cc:	4650      	mov	r0, sl
 80021ce:	6921      	ldr	r1, [r4, #16]
 80021d0:	f000 face 	bl	8002770 <_free_r>
 80021d4:	e7c7      	b.n	8002166 <__ssputs_r+0x46>
	...

080021d8 <_svfiprintf_r>:
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021dc:	4698      	mov	r8, r3
 80021de:	898b      	ldrh	r3, [r1, #12]
 80021e0:	4607      	mov	r7, r0
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	460d      	mov	r5, r1
 80021e6:	4614      	mov	r4, r2
 80021e8:	b09d      	sub	sp, #116	; 0x74
 80021ea:	d50e      	bpl.n	800220a <_svfiprintf_r+0x32>
 80021ec:	690b      	ldr	r3, [r1, #16]
 80021ee:	b963      	cbnz	r3, 800220a <_svfiprintf_r+0x32>
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	f000 fb25 	bl	8002840 <_malloc_r>
 80021f6:	6028      	str	r0, [r5, #0]
 80021f8:	6128      	str	r0, [r5, #16]
 80021fa:	b920      	cbnz	r0, 8002206 <_svfiprintf_r+0x2e>
 80021fc:	230c      	movs	r3, #12
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002204:	e0d1      	b.n	80023aa <_svfiprintf_r+0x1d2>
 8002206:	2340      	movs	r3, #64	; 0x40
 8002208:	616b      	str	r3, [r5, #20]
 800220a:	2300      	movs	r3, #0
 800220c:	9309      	str	r3, [sp, #36]	; 0x24
 800220e:	2320      	movs	r3, #32
 8002210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002214:	2330      	movs	r3, #48	; 0x30
 8002216:	f04f 0901 	mov.w	r9, #1
 800221a:	f8cd 800c 	str.w	r8, [sp, #12]
 800221e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80023c4 <_svfiprintf_r+0x1ec>
 8002222:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002226:	4623      	mov	r3, r4
 8002228:	469a      	mov	sl, r3
 800222a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800222e:	b10a      	cbz	r2, 8002234 <_svfiprintf_r+0x5c>
 8002230:	2a25      	cmp	r2, #37	; 0x25
 8002232:	d1f9      	bne.n	8002228 <_svfiprintf_r+0x50>
 8002234:	ebba 0b04 	subs.w	fp, sl, r4
 8002238:	d00b      	beq.n	8002252 <_svfiprintf_r+0x7a>
 800223a:	465b      	mov	r3, fp
 800223c:	4622      	mov	r2, r4
 800223e:	4629      	mov	r1, r5
 8002240:	4638      	mov	r0, r7
 8002242:	f7ff ff6d 	bl	8002120 <__ssputs_r>
 8002246:	3001      	adds	r0, #1
 8002248:	f000 80aa 	beq.w	80023a0 <_svfiprintf_r+0x1c8>
 800224c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800224e:	445a      	add	r2, fp
 8002250:	9209      	str	r2, [sp, #36]	; 0x24
 8002252:	f89a 3000 	ldrb.w	r3, [sl]
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80a2 	beq.w	80023a0 <_svfiprintf_r+0x1c8>
 800225c:	2300      	movs	r3, #0
 800225e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002266:	f10a 0a01 	add.w	sl, sl, #1
 800226a:	9304      	str	r3, [sp, #16]
 800226c:	9307      	str	r3, [sp, #28]
 800226e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002272:	931a      	str	r3, [sp, #104]	; 0x68
 8002274:	4654      	mov	r4, sl
 8002276:	2205      	movs	r2, #5
 8002278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800227c:	4851      	ldr	r0, [pc, #324]	; (80023c4 <_svfiprintf_r+0x1ec>)
 800227e:	f000 fa41 	bl	8002704 <memchr>
 8002282:	9a04      	ldr	r2, [sp, #16]
 8002284:	b9d8      	cbnz	r0, 80022be <_svfiprintf_r+0xe6>
 8002286:	06d0      	lsls	r0, r2, #27
 8002288:	bf44      	itt	mi
 800228a:	2320      	movmi	r3, #32
 800228c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002290:	0711      	lsls	r1, r2, #28
 8002292:	bf44      	itt	mi
 8002294:	232b      	movmi	r3, #43	; 0x2b
 8002296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800229a:	f89a 3000 	ldrb.w	r3, [sl]
 800229e:	2b2a      	cmp	r3, #42	; 0x2a
 80022a0:	d015      	beq.n	80022ce <_svfiprintf_r+0xf6>
 80022a2:	4654      	mov	r4, sl
 80022a4:	2000      	movs	r0, #0
 80022a6:	f04f 0c0a 	mov.w	ip, #10
 80022aa:	9a07      	ldr	r2, [sp, #28]
 80022ac:	4621      	mov	r1, r4
 80022ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022b2:	3b30      	subs	r3, #48	; 0x30
 80022b4:	2b09      	cmp	r3, #9
 80022b6:	d94e      	bls.n	8002356 <_svfiprintf_r+0x17e>
 80022b8:	b1b0      	cbz	r0, 80022e8 <_svfiprintf_r+0x110>
 80022ba:	9207      	str	r2, [sp, #28]
 80022bc:	e014      	b.n	80022e8 <_svfiprintf_r+0x110>
 80022be:	eba0 0308 	sub.w	r3, r0, r8
 80022c2:	fa09 f303 	lsl.w	r3, r9, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	46a2      	mov	sl, r4
 80022ca:	9304      	str	r3, [sp, #16]
 80022cc:	e7d2      	b.n	8002274 <_svfiprintf_r+0x9c>
 80022ce:	9b03      	ldr	r3, [sp, #12]
 80022d0:	1d19      	adds	r1, r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	9103      	str	r1, [sp, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	bfbb      	ittet	lt
 80022da:	425b      	neglt	r3, r3
 80022dc:	f042 0202 	orrlt.w	r2, r2, #2
 80022e0:	9307      	strge	r3, [sp, #28]
 80022e2:	9307      	strlt	r3, [sp, #28]
 80022e4:	bfb8      	it	lt
 80022e6:	9204      	strlt	r2, [sp, #16]
 80022e8:	7823      	ldrb	r3, [r4, #0]
 80022ea:	2b2e      	cmp	r3, #46	; 0x2e
 80022ec:	d10c      	bne.n	8002308 <_svfiprintf_r+0x130>
 80022ee:	7863      	ldrb	r3, [r4, #1]
 80022f0:	2b2a      	cmp	r3, #42	; 0x2a
 80022f2:	d135      	bne.n	8002360 <_svfiprintf_r+0x188>
 80022f4:	9b03      	ldr	r3, [sp, #12]
 80022f6:	3402      	adds	r4, #2
 80022f8:	1d1a      	adds	r2, r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	9203      	str	r2, [sp, #12]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bfb8      	it	lt
 8002302:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002306:	9305      	str	r3, [sp, #20]
 8002308:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80023c8 <_svfiprintf_r+0x1f0>
 800230c:	2203      	movs	r2, #3
 800230e:	4650      	mov	r0, sl
 8002310:	7821      	ldrb	r1, [r4, #0]
 8002312:	f000 f9f7 	bl	8002704 <memchr>
 8002316:	b140      	cbz	r0, 800232a <_svfiprintf_r+0x152>
 8002318:	2340      	movs	r3, #64	; 0x40
 800231a:	eba0 000a 	sub.w	r0, r0, sl
 800231e:	fa03 f000 	lsl.w	r0, r3, r0
 8002322:	9b04      	ldr	r3, [sp, #16]
 8002324:	3401      	adds	r4, #1
 8002326:	4303      	orrs	r3, r0
 8002328:	9304      	str	r3, [sp, #16]
 800232a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800232e:	2206      	movs	r2, #6
 8002330:	4826      	ldr	r0, [pc, #152]	; (80023cc <_svfiprintf_r+0x1f4>)
 8002332:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002336:	f000 f9e5 	bl	8002704 <memchr>
 800233a:	2800      	cmp	r0, #0
 800233c:	d038      	beq.n	80023b0 <_svfiprintf_r+0x1d8>
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <_svfiprintf_r+0x1f8>)
 8002340:	bb1b      	cbnz	r3, 800238a <_svfiprintf_r+0x1b2>
 8002342:	9b03      	ldr	r3, [sp, #12]
 8002344:	3307      	adds	r3, #7
 8002346:	f023 0307 	bic.w	r3, r3, #7
 800234a:	3308      	adds	r3, #8
 800234c:	9303      	str	r3, [sp, #12]
 800234e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002350:	4433      	add	r3, r6
 8002352:	9309      	str	r3, [sp, #36]	; 0x24
 8002354:	e767      	b.n	8002226 <_svfiprintf_r+0x4e>
 8002356:	460c      	mov	r4, r1
 8002358:	2001      	movs	r0, #1
 800235a:	fb0c 3202 	mla	r2, ip, r2, r3
 800235e:	e7a5      	b.n	80022ac <_svfiprintf_r+0xd4>
 8002360:	2300      	movs	r3, #0
 8002362:	f04f 0c0a 	mov.w	ip, #10
 8002366:	4619      	mov	r1, r3
 8002368:	3401      	adds	r4, #1
 800236a:	9305      	str	r3, [sp, #20]
 800236c:	4620      	mov	r0, r4
 800236e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002372:	3a30      	subs	r2, #48	; 0x30
 8002374:	2a09      	cmp	r2, #9
 8002376:	d903      	bls.n	8002380 <_svfiprintf_r+0x1a8>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0c5      	beq.n	8002308 <_svfiprintf_r+0x130>
 800237c:	9105      	str	r1, [sp, #20]
 800237e:	e7c3      	b.n	8002308 <_svfiprintf_r+0x130>
 8002380:	4604      	mov	r4, r0
 8002382:	2301      	movs	r3, #1
 8002384:	fb0c 2101 	mla	r1, ip, r1, r2
 8002388:	e7f0      	b.n	800236c <_svfiprintf_r+0x194>
 800238a:	ab03      	add	r3, sp, #12
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	462a      	mov	r2, r5
 8002390:	4638      	mov	r0, r7
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_svfiprintf_r+0x1fc>)
 8002394:	a904      	add	r1, sp, #16
 8002396:	f3af 8000 	nop.w
 800239a:	1c42      	adds	r2, r0, #1
 800239c:	4606      	mov	r6, r0
 800239e:	d1d6      	bne.n	800234e <_svfiprintf_r+0x176>
 80023a0:	89ab      	ldrh	r3, [r5, #12]
 80023a2:	065b      	lsls	r3, r3, #25
 80023a4:	f53f af2c 	bmi.w	8002200 <_svfiprintf_r+0x28>
 80023a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023aa:	b01d      	add	sp, #116	; 0x74
 80023ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b0:	ab03      	add	r3, sp, #12
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	462a      	mov	r2, r5
 80023b6:	4638      	mov	r0, r7
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <_svfiprintf_r+0x1fc>)
 80023ba:	a904      	add	r1, sp, #16
 80023bc:	f000 f87c 	bl	80024b8 <_printf_i>
 80023c0:	e7eb      	b.n	800239a <_svfiprintf_r+0x1c2>
 80023c2:	bf00      	nop
 80023c4:	08002a30 	.word	0x08002a30
 80023c8:	08002a36 	.word	0x08002a36
 80023cc:	08002a3a 	.word	0x08002a3a
 80023d0:	00000000 	.word	0x00000000
 80023d4:	08002121 	.word	0x08002121

080023d8 <_printf_common>:
 80023d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023dc:	4616      	mov	r6, r2
 80023de:	4699      	mov	r9, r3
 80023e0:	688a      	ldr	r2, [r1, #8]
 80023e2:	690b      	ldr	r3, [r1, #16]
 80023e4:	4607      	mov	r7, r0
 80023e6:	4293      	cmp	r3, r2
 80023e8:	bfb8      	it	lt
 80023ea:	4613      	movlt	r3, r2
 80023ec:	6033      	str	r3, [r6, #0]
 80023ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023f2:	460c      	mov	r4, r1
 80023f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023f8:	b10a      	cbz	r2, 80023fe <_printf_common+0x26>
 80023fa:	3301      	adds	r3, #1
 80023fc:	6033      	str	r3, [r6, #0]
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	0699      	lsls	r1, r3, #26
 8002402:	bf42      	ittt	mi
 8002404:	6833      	ldrmi	r3, [r6, #0]
 8002406:	3302      	addmi	r3, #2
 8002408:	6033      	strmi	r3, [r6, #0]
 800240a:	6825      	ldr	r5, [r4, #0]
 800240c:	f015 0506 	ands.w	r5, r5, #6
 8002410:	d106      	bne.n	8002420 <_printf_common+0x48>
 8002412:	f104 0a19 	add.w	sl, r4, #25
 8002416:	68e3      	ldr	r3, [r4, #12]
 8002418:	6832      	ldr	r2, [r6, #0]
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	42ab      	cmp	r3, r5
 800241e:	dc28      	bgt.n	8002472 <_printf_common+0x9a>
 8002420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002424:	1e13      	subs	r3, r2, #0
 8002426:	6822      	ldr	r2, [r4, #0]
 8002428:	bf18      	it	ne
 800242a:	2301      	movne	r3, #1
 800242c:	0692      	lsls	r2, r2, #26
 800242e:	d42d      	bmi.n	800248c <_printf_common+0xb4>
 8002430:	4649      	mov	r1, r9
 8002432:	4638      	mov	r0, r7
 8002434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002438:	47c0      	blx	r8
 800243a:	3001      	adds	r0, #1
 800243c:	d020      	beq.n	8002480 <_printf_common+0xa8>
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	68e5      	ldr	r5, [r4, #12]
 8002442:	f003 0306 	and.w	r3, r3, #6
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf18      	it	ne
 800244a:	2500      	movne	r5, #0
 800244c:	6832      	ldr	r2, [r6, #0]
 800244e:	f04f 0600 	mov.w	r6, #0
 8002452:	68a3      	ldr	r3, [r4, #8]
 8002454:	bf08      	it	eq
 8002456:	1aad      	subeq	r5, r5, r2
 8002458:	6922      	ldr	r2, [r4, #16]
 800245a:	bf08      	it	eq
 800245c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002460:	4293      	cmp	r3, r2
 8002462:	bfc4      	itt	gt
 8002464:	1a9b      	subgt	r3, r3, r2
 8002466:	18ed      	addgt	r5, r5, r3
 8002468:	341a      	adds	r4, #26
 800246a:	42b5      	cmp	r5, r6
 800246c:	d11a      	bne.n	80024a4 <_printf_common+0xcc>
 800246e:	2000      	movs	r0, #0
 8002470:	e008      	b.n	8002484 <_printf_common+0xac>
 8002472:	2301      	movs	r3, #1
 8002474:	4652      	mov	r2, sl
 8002476:	4649      	mov	r1, r9
 8002478:	4638      	mov	r0, r7
 800247a:	47c0      	blx	r8
 800247c:	3001      	adds	r0, #1
 800247e:	d103      	bne.n	8002488 <_printf_common+0xb0>
 8002480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002488:	3501      	adds	r5, #1
 800248a:	e7c4      	b.n	8002416 <_printf_common+0x3e>
 800248c:	2030      	movs	r0, #48	; 0x30
 800248e:	18e1      	adds	r1, r4, r3
 8002490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800249a:	4422      	add	r2, r4
 800249c:	3302      	adds	r3, #2
 800249e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024a2:	e7c5      	b.n	8002430 <_printf_common+0x58>
 80024a4:	2301      	movs	r3, #1
 80024a6:	4622      	mov	r2, r4
 80024a8:	4649      	mov	r1, r9
 80024aa:	4638      	mov	r0, r7
 80024ac:	47c0      	blx	r8
 80024ae:	3001      	adds	r0, #1
 80024b0:	d0e6      	beq.n	8002480 <_printf_common+0xa8>
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7d9      	b.n	800246a <_printf_common+0x92>
	...

080024b8 <_printf_i>:
 80024b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	7e0f      	ldrb	r7, [r1, #24]
 80024be:	4691      	mov	r9, r2
 80024c0:	2f78      	cmp	r7, #120	; 0x78
 80024c2:	4680      	mov	r8, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	469a      	mov	sl, r3
 80024c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024ce:	d807      	bhi.n	80024e0 <_printf_i+0x28>
 80024d0:	2f62      	cmp	r7, #98	; 0x62
 80024d2:	d80a      	bhi.n	80024ea <_printf_i+0x32>
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	f000 80d9 	beq.w	800268c <_printf_i+0x1d4>
 80024da:	2f58      	cmp	r7, #88	; 0x58
 80024dc:	f000 80a4 	beq.w	8002628 <_printf_i+0x170>
 80024e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024e8:	e03a      	b.n	8002560 <_printf_i+0xa8>
 80024ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024ee:	2b15      	cmp	r3, #21
 80024f0:	d8f6      	bhi.n	80024e0 <_printf_i+0x28>
 80024f2:	a101      	add	r1, pc, #4	; (adr r1, 80024f8 <_printf_i+0x40>)
 80024f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024f8:	08002551 	.word	0x08002551
 80024fc:	08002565 	.word	0x08002565
 8002500:	080024e1 	.word	0x080024e1
 8002504:	080024e1 	.word	0x080024e1
 8002508:	080024e1 	.word	0x080024e1
 800250c:	080024e1 	.word	0x080024e1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024e1 	.word	0x080024e1
 8002518:	080024e1 	.word	0x080024e1
 800251c:	080024e1 	.word	0x080024e1
 8002520:	080024e1 	.word	0x080024e1
 8002524:	08002673 	.word	0x08002673
 8002528:	08002595 	.word	0x08002595
 800252c:	08002655 	.word	0x08002655
 8002530:	080024e1 	.word	0x080024e1
 8002534:	080024e1 	.word	0x080024e1
 8002538:	08002695 	.word	0x08002695
 800253c:	080024e1 	.word	0x080024e1
 8002540:	08002595 	.word	0x08002595
 8002544:	080024e1 	.word	0x080024e1
 8002548:	080024e1 	.word	0x080024e1
 800254c:	0800265d 	.word	0x0800265d
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	602a      	str	r2, [r5, #0]
 8002558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800255c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002560:	2301      	movs	r3, #1
 8002562:	e0a4      	b.n	80026ae <_printf_i+0x1f6>
 8002564:	6820      	ldr	r0, [r4, #0]
 8002566:	6829      	ldr	r1, [r5, #0]
 8002568:	0606      	lsls	r6, r0, #24
 800256a:	f101 0304 	add.w	r3, r1, #4
 800256e:	d50a      	bpl.n	8002586 <_printf_i+0xce>
 8002570:	680e      	ldr	r6, [r1, #0]
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	2e00      	cmp	r6, #0
 8002576:	da03      	bge.n	8002580 <_printf_i+0xc8>
 8002578:	232d      	movs	r3, #45	; 0x2d
 800257a:	4276      	negs	r6, r6
 800257c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002580:	230a      	movs	r3, #10
 8002582:	485e      	ldr	r0, [pc, #376]	; (80026fc <_printf_i+0x244>)
 8002584:	e019      	b.n	80025ba <_printf_i+0x102>
 8002586:	680e      	ldr	r6, [r1, #0]
 8002588:	f010 0f40 	tst.w	r0, #64	; 0x40
 800258c:	602b      	str	r3, [r5, #0]
 800258e:	bf18      	it	ne
 8002590:	b236      	sxthne	r6, r6
 8002592:	e7ef      	b.n	8002574 <_printf_i+0xbc>
 8002594:	682b      	ldr	r3, [r5, #0]
 8002596:	6820      	ldr	r0, [r4, #0]
 8002598:	1d19      	adds	r1, r3, #4
 800259a:	6029      	str	r1, [r5, #0]
 800259c:	0601      	lsls	r1, r0, #24
 800259e:	d501      	bpl.n	80025a4 <_printf_i+0xec>
 80025a0:	681e      	ldr	r6, [r3, #0]
 80025a2:	e002      	b.n	80025aa <_printf_i+0xf2>
 80025a4:	0646      	lsls	r6, r0, #25
 80025a6:	d5fb      	bpl.n	80025a0 <_printf_i+0xe8>
 80025a8:	881e      	ldrh	r6, [r3, #0]
 80025aa:	2f6f      	cmp	r7, #111	; 0x6f
 80025ac:	bf0c      	ite	eq
 80025ae:	2308      	moveq	r3, #8
 80025b0:	230a      	movne	r3, #10
 80025b2:	4852      	ldr	r0, [pc, #328]	; (80026fc <_printf_i+0x244>)
 80025b4:	2100      	movs	r1, #0
 80025b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ba:	6865      	ldr	r5, [r4, #4]
 80025bc:	2d00      	cmp	r5, #0
 80025be:	bfa8      	it	ge
 80025c0:	6821      	ldrge	r1, [r4, #0]
 80025c2:	60a5      	str	r5, [r4, #8]
 80025c4:	bfa4      	itt	ge
 80025c6:	f021 0104 	bicge.w	r1, r1, #4
 80025ca:	6021      	strge	r1, [r4, #0]
 80025cc:	b90e      	cbnz	r6, 80025d2 <_printf_i+0x11a>
 80025ce:	2d00      	cmp	r5, #0
 80025d0:	d04d      	beq.n	800266e <_printf_i+0x1b6>
 80025d2:	4615      	mov	r5, r2
 80025d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80025d8:	fb03 6711 	mls	r7, r3, r1, r6
 80025dc:	5dc7      	ldrb	r7, [r0, r7]
 80025de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025e2:	4637      	mov	r7, r6
 80025e4:	42bb      	cmp	r3, r7
 80025e6:	460e      	mov	r6, r1
 80025e8:	d9f4      	bls.n	80025d4 <_printf_i+0x11c>
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d10b      	bne.n	8002606 <_printf_i+0x14e>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	07de      	lsls	r6, r3, #31
 80025f2:	d508      	bpl.n	8002606 <_printf_i+0x14e>
 80025f4:	6923      	ldr	r3, [r4, #16]
 80025f6:	6861      	ldr	r1, [r4, #4]
 80025f8:	4299      	cmp	r1, r3
 80025fa:	bfde      	ittt	le
 80025fc:	2330      	movle	r3, #48	; 0x30
 80025fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002602:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002606:	1b52      	subs	r2, r2, r5
 8002608:	6122      	str	r2, [r4, #16]
 800260a:	464b      	mov	r3, r9
 800260c:	4621      	mov	r1, r4
 800260e:	4640      	mov	r0, r8
 8002610:	f8cd a000 	str.w	sl, [sp]
 8002614:	aa03      	add	r2, sp, #12
 8002616:	f7ff fedf 	bl	80023d8 <_printf_common>
 800261a:	3001      	adds	r0, #1
 800261c:	d14c      	bne.n	80026b8 <_printf_i+0x200>
 800261e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002622:	b004      	add	sp, #16
 8002624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002628:	4834      	ldr	r0, [pc, #208]	; (80026fc <_printf_i+0x244>)
 800262a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800262e:	6829      	ldr	r1, [r5, #0]
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	f851 6b04 	ldr.w	r6, [r1], #4
 8002636:	6029      	str	r1, [r5, #0]
 8002638:	061d      	lsls	r5, r3, #24
 800263a:	d514      	bpl.n	8002666 <_printf_i+0x1ae>
 800263c:	07df      	lsls	r7, r3, #31
 800263e:	bf44      	itt	mi
 8002640:	f043 0320 	orrmi.w	r3, r3, #32
 8002644:	6023      	strmi	r3, [r4, #0]
 8002646:	b91e      	cbnz	r6, 8002650 <_printf_i+0x198>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f023 0320 	bic.w	r3, r3, #32
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	2310      	movs	r3, #16
 8002652:	e7af      	b.n	80025b4 <_printf_i+0xfc>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f043 0320 	orr.w	r3, r3, #32
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	2378      	movs	r3, #120	; 0x78
 800265e:	4828      	ldr	r0, [pc, #160]	; (8002700 <_printf_i+0x248>)
 8002660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002664:	e7e3      	b.n	800262e <_printf_i+0x176>
 8002666:	0659      	lsls	r1, r3, #25
 8002668:	bf48      	it	mi
 800266a:	b2b6      	uxthmi	r6, r6
 800266c:	e7e6      	b.n	800263c <_printf_i+0x184>
 800266e:	4615      	mov	r5, r2
 8002670:	e7bb      	b.n	80025ea <_printf_i+0x132>
 8002672:	682b      	ldr	r3, [r5, #0]
 8002674:	6826      	ldr	r6, [r4, #0]
 8002676:	1d18      	adds	r0, r3, #4
 8002678:	6961      	ldr	r1, [r4, #20]
 800267a:	6028      	str	r0, [r5, #0]
 800267c:	0635      	lsls	r5, r6, #24
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	d501      	bpl.n	8002686 <_printf_i+0x1ce>
 8002682:	6019      	str	r1, [r3, #0]
 8002684:	e002      	b.n	800268c <_printf_i+0x1d4>
 8002686:	0670      	lsls	r0, r6, #25
 8002688:	d5fb      	bpl.n	8002682 <_printf_i+0x1ca>
 800268a:	8019      	strh	r1, [r3, #0]
 800268c:	2300      	movs	r3, #0
 800268e:	4615      	mov	r5, r2
 8002690:	6123      	str	r3, [r4, #16]
 8002692:	e7ba      	b.n	800260a <_printf_i+0x152>
 8002694:	682b      	ldr	r3, [r5, #0]
 8002696:	2100      	movs	r1, #0
 8002698:	1d1a      	adds	r2, r3, #4
 800269a:	602a      	str	r2, [r5, #0]
 800269c:	681d      	ldr	r5, [r3, #0]
 800269e:	6862      	ldr	r2, [r4, #4]
 80026a0:	4628      	mov	r0, r5
 80026a2:	f000 f82f 	bl	8002704 <memchr>
 80026a6:	b108      	cbz	r0, 80026ac <_printf_i+0x1f4>
 80026a8:	1b40      	subs	r0, r0, r5
 80026aa:	6060      	str	r0, [r4, #4]
 80026ac:	6863      	ldr	r3, [r4, #4]
 80026ae:	6123      	str	r3, [r4, #16]
 80026b0:	2300      	movs	r3, #0
 80026b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026b6:	e7a8      	b.n	800260a <_printf_i+0x152>
 80026b8:	462a      	mov	r2, r5
 80026ba:	4649      	mov	r1, r9
 80026bc:	4640      	mov	r0, r8
 80026be:	6923      	ldr	r3, [r4, #16]
 80026c0:	47d0      	blx	sl
 80026c2:	3001      	adds	r0, #1
 80026c4:	d0ab      	beq.n	800261e <_printf_i+0x166>
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	079b      	lsls	r3, r3, #30
 80026ca:	d413      	bmi.n	80026f4 <_printf_i+0x23c>
 80026cc:	68e0      	ldr	r0, [r4, #12]
 80026ce:	9b03      	ldr	r3, [sp, #12]
 80026d0:	4298      	cmp	r0, r3
 80026d2:	bfb8      	it	lt
 80026d4:	4618      	movlt	r0, r3
 80026d6:	e7a4      	b.n	8002622 <_printf_i+0x16a>
 80026d8:	2301      	movs	r3, #1
 80026da:	4632      	mov	r2, r6
 80026dc:	4649      	mov	r1, r9
 80026de:	4640      	mov	r0, r8
 80026e0:	47d0      	blx	sl
 80026e2:	3001      	adds	r0, #1
 80026e4:	d09b      	beq.n	800261e <_printf_i+0x166>
 80026e6:	3501      	adds	r5, #1
 80026e8:	68e3      	ldr	r3, [r4, #12]
 80026ea:	9903      	ldr	r1, [sp, #12]
 80026ec:	1a5b      	subs	r3, r3, r1
 80026ee:	42ab      	cmp	r3, r5
 80026f0:	dcf2      	bgt.n	80026d8 <_printf_i+0x220>
 80026f2:	e7eb      	b.n	80026cc <_printf_i+0x214>
 80026f4:	2500      	movs	r5, #0
 80026f6:	f104 0619 	add.w	r6, r4, #25
 80026fa:	e7f5      	b.n	80026e8 <_printf_i+0x230>
 80026fc:	08002a41 	.word	0x08002a41
 8002700:	08002a52 	.word	0x08002a52

08002704 <memchr>:
 8002704:	4603      	mov	r3, r0
 8002706:	b510      	push	{r4, lr}
 8002708:	b2c9      	uxtb	r1, r1
 800270a:	4402      	add	r2, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	4618      	mov	r0, r3
 8002710:	d101      	bne.n	8002716 <memchr+0x12>
 8002712:	2000      	movs	r0, #0
 8002714:	e003      	b.n	800271e <memchr+0x1a>
 8002716:	7804      	ldrb	r4, [r0, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	428c      	cmp	r4, r1
 800271c:	d1f6      	bne.n	800270c <memchr+0x8>
 800271e:	bd10      	pop	{r4, pc}

08002720 <memcpy>:
 8002720:	440a      	add	r2, r1
 8002722:	4291      	cmp	r1, r2
 8002724:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002728:	d100      	bne.n	800272c <memcpy+0xc>
 800272a:	4770      	bx	lr
 800272c:	b510      	push	{r4, lr}
 800272e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002732:	4291      	cmp	r1, r2
 8002734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002738:	d1f9      	bne.n	800272e <memcpy+0xe>
 800273a:	bd10      	pop	{r4, pc}

0800273c <memmove>:
 800273c:	4288      	cmp	r0, r1
 800273e:	b510      	push	{r4, lr}
 8002740:	eb01 0402 	add.w	r4, r1, r2
 8002744:	d902      	bls.n	800274c <memmove+0x10>
 8002746:	4284      	cmp	r4, r0
 8002748:	4623      	mov	r3, r4
 800274a:	d807      	bhi.n	800275c <memmove+0x20>
 800274c:	1e43      	subs	r3, r0, #1
 800274e:	42a1      	cmp	r1, r4
 8002750:	d008      	beq.n	8002764 <memmove+0x28>
 8002752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800275a:	e7f8      	b.n	800274e <memmove+0x12>
 800275c:	4601      	mov	r1, r0
 800275e:	4402      	add	r2, r0
 8002760:	428a      	cmp	r2, r1
 8002762:	d100      	bne.n	8002766 <memmove+0x2a>
 8002764:	bd10      	pop	{r4, pc}
 8002766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800276a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800276e:	e7f7      	b.n	8002760 <memmove+0x24>

08002770 <_free_r>:
 8002770:	b538      	push	{r3, r4, r5, lr}
 8002772:	4605      	mov	r5, r0
 8002774:	2900      	cmp	r1, #0
 8002776:	d040      	beq.n	80027fa <_free_r+0x8a>
 8002778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800277c:	1f0c      	subs	r4, r1, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	bfb8      	it	lt
 8002782:	18e4      	addlt	r4, r4, r3
 8002784:	f000 f910 	bl	80029a8 <__malloc_lock>
 8002788:	4a1c      	ldr	r2, [pc, #112]	; (80027fc <_free_r+0x8c>)
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	b933      	cbnz	r3, 800279c <_free_r+0x2c>
 800278e:	6063      	str	r3, [r4, #4]
 8002790:	6014      	str	r4, [r2, #0]
 8002792:	4628      	mov	r0, r5
 8002794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002798:	f000 b90c 	b.w	80029b4 <__malloc_unlock>
 800279c:	42a3      	cmp	r3, r4
 800279e:	d908      	bls.n	80027b2 <_free_r+0x42>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	1821      	adds	r1, r4, r0
 80027a4:	428b      	cmp	r3, r1
 80027a6:	bf01      	itttt	eq
 80027a8:	6819      	ldreq	r1, [r3, #0]
 80027aa:	685b      	ldreq	r3, [r3, #4]
 80027ac:	1809      	addeq	r1, r1, r0
 80027ae:	6021      	streq	r1, [r4, #0]
 80027b0:	e7ed      	b.n	800278e <_free_r+0x1e>
 80027b2:	461a      	mov	r2, r3
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	b10b      	cbz	r3, 80027bc <_free_r+0x4c>
 80027b8:	42a3      	cmp	r3, r4
 80027ba:	d9fa      	bls.n	80027b2 <_free_r+0x42>
 80027bc:	6811      	ldr	r1, [r2, #0]
 80027be:	1850      	adds	r0, r2, r1
 80027c0:	42a0      	cmp	r0, r4
 80027c2:	d10b      	bne.n	80027dc <_free_r+0x6c>
 80027c4:	6820      	ldr	r0, [r4, #0]
 80027c6:	4401      	add	r1, r0
 80027c8:	1850      	adds	r0, r2, r1
 80027ca:	4283      	cmp	r3, r0
 80027cc:	6011      	str	r1, [r2, #0]
 80027ce:	d1e0      	bne.n	8002792 <_free_r+0x22>
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4401      	add	r1, r0
 80027d6:	6011      	str	r1, [r2, #0]
 80027d8:	6053      	str	r3, [r2, #4]
 80027da:	e7da      	b.n	8002792 <_free_r+0x22>
 80027dc:	d902      	bls.n	80027e4 <_free_r+0x74>
 80027de:	230c      	movs	r3, #12
 80027e0:	602b      	str	r3, [r5, #0]
 80027e2:	e7d6      	b.n	8002792 <_free_r+0x22>
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	1821      	adds	r1, r4, r0
 80027e8:	428b      	cmp	r3, r1
 80027ea:	bf01      	itttt	eq
 80027ec:	6819      	ldreq	r1, [r3, #0]
 80027ee:	685b      	ldreq	r3, [r3, #4]
 80027f0:	1809      	addeq	r1, r1, r0
 80027f2:	6021      	streq	r1, [r4, #0]
 80027f4:	6063      	str	r3, [r4, #4]
 80027f6:	6054      	str	r4, [r2, #4]
 80027f8:	e7cb      	b.n	8002792 <_free_r+0x22>
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	20000094 	.word	0x20000094

08002800 <sbrk_aligned>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4e0e      	ldr	r6, [pc, #56]	; (800283c <sbrk_aligned+0x3c>)
 8002804:	460c      	mov	r4, r1
 8002806:	6831      	ldr	r1, [r6, #0]
 8002808:	4605      	mov	r5, r0
 800280a:	b911      	cbnz	r1, 8002812 <sbrk_aligned+0x12>
 800280c:	f000 f8bc 	bl	8002988 <_sbrk_r>
 8002810:	6030      	str	r0, [r6, #0]
 8002812:	4621      	mov	r1, r4
 8002814:	4628      	mov	r0, r5
 8002816:	f000 f8b7 	bl	8002988 <_sbrk_r>
 800281a:	1c43      	adds	r3, r0, #1
 800281c:	d00a      	beq.n	8002834 <sbrk_aligned+0x34>
 800281e:	1cc4      	adds	r4, r0, #3
 8002820:	f024 0403 	bic.w	r4, r4, #3
 8002824:	42a0      	cmp	r0, r4
 8002826:	d007      	beq.n	8002838 <sbrk_aligned+0x38>
 8002828:	1a21      	subs	r1, r4, r0
 800282a:	4628      	mov	r0, r5
 800282c:	f000 f8ac 	bl	8002988 <_sbrk_r>
 8002830:	3001      	adds	r0, #1
 8002832:	d101      	bne.n	8002838 <sbrk_aligned+0x38>
 8002834:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002838:	4620      	mov	r0, r4
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	20000098 	.word	0x20000098

08002840 <_malloc_r>:
 8002840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002844:	1ccd      	adds	r5, r1, #3
 8002846:	f025 0503 	bic.w	r5, r5, #3
 800284a:	3508      	adds	r5, #8
 800284c:	2d0c      	cmp	r5, #12
 800284e:	bf38      	it	cc
 8002850:	250c      	movcc	r5, #12
 8002852:	2d00      	cmp	r5, #0
 8002854:	4607      	mov	r7, r0
 8002856:	db01      	blt.n	800285c <_malloc_r+0x1c>
 8002858:	42a9      	cmp	r1, r5
 800285a:	d905      	bls.n	8002868 <_malloc_r+0x28>
 800285c:	230c      	movs	r3, #12
 800285e:	2600      	movs	r6, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4630      	mov	r0, r6
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002868:	4e2e      	ldr	r6, [pc, #184]	; (8002924 <_malloc_r+0xe4>)
 800286a:	f000 f89d 	bl	80029a8 <__malloc_lock>
 800286e:	6833      	ldr	r3, [r6, #0]
 8002870:	461c      	mov	r4, r3
 8002872:	bb34      	cbnz	r4, 80028c2 <_malloc_r+0x82>
 8002874:	4629      	mov	r1, r5
 8002876:	4638      	mov	r0, r7
 8002878:	f7ff ffc2 	bl	8002800 <sbrk_aligned>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	4604      	mov	r4, r0
 8002880:	d14d      	bne.n	800291e <_malloc_r+0xde>
 8002882:	6834      	ldr	r4, [r6, #0]
 8002884:	4626      	mov	r6, r4
 8002886:	2e00      	cmp	r6, #0
 8002888:	d140      	bne.n	800290c <_malloc_r+0xcc>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	4631      	mov	r1, r6
 800288e:	4638      	mov	r0, r7
 8002890:	eb04 0803 	add.w	r8, r4, r3
 8002894:	f000 f878 	bl	8002988 <_sbrk_r>
 8002898:	4580      	cmp	r8, r0
 800289a:	d13a      	bne.n	8002912 <_malloc_r+0xd2>
 800289c:	6821      	ldr	r1, [r4, #0]
 800289e:	3503      	adds	r5, #3
 80028a0:	1a6d      	subs	r5, r5, r1
 80028a2:	f025 0503 	bic.w	r5, r5, #3
 80028a6:	3508      	adds	r5, #8
 80028a8:	2d0c      	cmp	r5, #12
 80028aa:	bf38      	it	cc
 80028ac:	250c      	movcc	r5, #12
 80028ae:	4638      	mov	r0, r7
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7ff ffa5 	bl	8002800 <sbrk_aligned>
 80028b6:	3001      	adds	r0, #1
 80028b8:	d02b      	beq.n	8002912 <_malloc_r+0xd2>
 80028ba:	6823      	ldr	r3, [r4, #0]
 80028bc:	442b      	add	r3, r5
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	e00e      	b.n	80028e0 <_malloc_r+0xa0>
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	1b52      	subs	r2, r2, r5
 80028c6:	d41e      	bmi.n	8002906 <_malloc_r+0xc6>
 80028c8:	2a0b      	cmp	r2, #11
 80028ca:	d916      	bls.n	80028fa <_malloc_r+0xba>
 80028cc:	1961      	adds	r1, r4, r5
 80028ce:	42a3      	cmp	r3, r4
 80028d0:	6025      	str	r5, [r4, #0]
 80028d2:	bf18      	it	ne
 80028d4:	6059      	strne	r1, [r3, #4]
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	bf08      	it	eq
 80028da:	6031      	streq	r1, [r6, #0]
 80028dc:	5162      	str	r2, [r4, r5]
 80028de:	604b      	str	r3, [r1, #4]
 80028e0:	4638      	mov	r0, r7
 80028e2:	f104 060b 	add.w	r6, r4, #11
 80028e6:	f000 f865 	bl	80029b4 <__malloc_unlock>
 80028ea:	f026 0607 	bic.w	r6, r6, #7
 80028ee:	1d23      	adds	r3, r4, #4
 80028f0:	1af2      	subs	r2, r6, r3
 80028f2:	d0b6      	beq.n	8002862 <_malloc_r+0x22>
 80028f4:	1b9b      	subs	r3, r3, r6
 80028f6:	50a3      	str	r3, [r4, r2]
 80028f8:	e7b3      	b.n	8002862 <_malloc_r+0x22>
 80028fa:	6862      	ldr	r2, [r4, #4]
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	bf0c      	ite	eq
 8002900:	6032      	streq	r2, [r6, #0]
 8002902:	605a      	strne	r2, [r3, #4]
 8002904:	e7ec      	b.n	80028e0 <_malloc_r+0xa0>
 8002906:	4623      	mov	r3, r4
 8002908:	6864      	ldr	r4, [r4, #4]
 800290a:	e7b2      	b.n	8002872 <_malloc_r+0x32>
 800290c:	4634      	mov	r4, r6
 800290e:	6876      	ldr	r6, [r6, #4]
 8002910:	e7b9      	b.n	8002886 <_malloc_r+0x46>
 8002912:	230c      	movs	r3, #12
 8002914:	4638      	mov	r0, r7
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	f000 f84c 	bl	80029b4 <__malloc_unlock>
 800291c:	e7a1      	b.n	8002862 <_malloc_r+0x22>
 800291e:	6025      	str	r5, [r4, #0]
 8002920:	e7de      	b.n	80028e0 <_malloc_r+0xa0>
 8002922:	bf00      	nop
 8002924:	20000094 	.word	0x20000094

08002928 <_realloc_r>:
 8002928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292c:	4680      	mov	r8, r0
 800292e:	4614      	mov	r4, r2
 8002930:	460e      	mov	r6, r1
 8002932:	b921      	cbnz	r1, 800293e <_realloc_r+0x16>
 8002934:	4611      	mov	r1, r2
 8002936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800293a:	f7ff bf81 	b.w	8002840 <_malloc_r>
 800293e:	b92a      	cbnz	r2, 800294c <_realloc_r+0x24>
 8002940:	f7ff ff16 	bl	8002770 <_free_r>
 8002944:	4625      	mov	r5, r4
 8002946:	4628      	mov	r0, r5
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800294c:	f000 f838 	bl	80029c0 <_malloc_usable_size_r>
 8002950:	4284      	cmp	r4, r0
 8002952:	4607      	mov	r7, r0
 8002954:	d802      	bhi.n	800295c <_realloc_r+0x34>
 8002956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800295a:	d812      	bhi.n	8002982 <_realloc_r+0x5a>
 800295c:	4621      	mov	r1, r4
 800295e:	4640      	mov	r0, r8
 8002960:	f7ff ff6e 	bl	8002840 <_malloc_r>
 8002964:	4605      	mov	r5, r0
 8002966:	2800      	cmp	r0, #0
 8002968:	d0ed      	beq.n	8002946 <_realloc_r+0x1e>
 800296a:	42bc      	cmp	r4, r7
 800296c:	4622      	mov	r2, r4
 800296e:	4631      	mov	r1, r6
 8002970:	bf28      	it	cs
 8002972:	463a      	movcs	r2, r7
 8002974:	f7ff fed4 	bl	8002720 <memcpy>
 8002978:	4631      	mov	r1, r6
 800297a:	4640      	mov	r0, r8
 800297c:	f7ff fef8 	bl	8002770 <_free_r>
 8002980:	e7e1      	b.n	8002946 <_realloc_r+0x1e>
 8002982:	4635      	mov	r5, r6
 8002984:	e7df      	b.n	8002946 <_realloc_r+0x1e>
	...

08002988 <_sbrk_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	2300      	movs	r3, #0
 800298c:	4d05      	ldr	r5, [pc, #20]	; (80029a4 <_sbrk_r+0x1c>)
 800298e:	4604      	mov	r4, r0
 8002990:	4608      	mov	r0, r1
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	f7fd ff36 	bl	8000804 <_sbrk>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d102      	bne.n	80029a2 <_sbrk_r+0x1a>
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	b103      	cbz	r3, 80029a2 <_sbrk_r+0x1a>
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	bd38      	pop	{r3, r4, r5, pc}
 80029a4:	2000009c 	.word	0x2000009c

080029a8 <__malloc_lock>:
 80029a8:	4801      	ldr	r0, [pc, #4]	; (80029b0 <__malloc_lock+0x8>)
 80029aa:	f000 b811 	b.w	80029d0 <__retarget_lock_acquire_recursive>
 80029ae:	bf00      	nop
 80029b0:	200000a0 	.word	0x200000a0

080029b4 <__malloc_unlock>:
 80029b4:	4801      	ldr	r0, [pc, #4]	; (80029bc <__malloc_unlock+0x8>)
 80029b6:	f000 b80c 	b.w	80029d2 <__retarget_lock_release_recursive>
 80029ba:	bf00      	nop
 80029bc:	200000a0 	.word	0x200000a0

080029c0 <_malloc_usable_size_r>:
 80029c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80029c4:	1f18      	subs	r0, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bfbc      	itt	lt
 80029ca:	580b      	ldrlt	r3, [r1, r0]
 80029cc:	18c0      	addlt	r0, r0, r3
 80029ce:	4770      	bx	lr

080029d0 <__retarget_lock_acquire_recursive>:
 80029d0:	4770      	bx	lr

080029d2 <__retarget_lock_release_recursive>:
 80029d2:	4770      	bx	lr

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
