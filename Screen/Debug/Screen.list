
Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002ab4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002ab4  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003487  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001225  00000000  00000000  00023520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00024748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00024bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016258  00000000  00000000  00024f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c99  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000803eb  00000000  00000000  00040e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c123c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  000c128c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029a4 	.word	0x080029a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029a4 	.word	0x080029a4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2uiz>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	d20e      	bcs.n	80004f2 <__aeabi_f2uiz+0x22>
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80004d8:	d30b      	bcc.n	80004f2 <__aeabi_f2uiz+0x22>
 80004da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d409      	bmi.n	80004f8 <__aeabi_f2uiz+0x28>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004ec:	fa23 f002 	lsr.w	r0, r3, r2
 80004f0:	4770      	bx	lr
 80004f2:	f04f 0000 	mov.w	r0, #0
 80004f6:	4770      	bx	lr
 80004f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80004fc:	d101      	bne.n	8000502 <__aeabi_f2uiz+0x32>
 80004fe:	0242      	lsls	r2, r0, #9
 8000500:	d102      	bne.n	8000508 <__aeabi_f2uiz+0x38>
 8000502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000506:	4770      	bx	lr
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 f9bb 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f89b 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f8d3 	bl	80006c8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  keypad_init();
 8000522:	f001 f8bb 	bl	800169c <keypad_init>

  HAL_Delay(10); //Estabilizacion
 8000526:	200a      	movs	r0, #10
 8000528:	f000 fa14 	bl	8000954 <HAL_Delay>

  uint32_t num_entero=9;
 800052c:	2309      	movs	r3, #9
 800052e:	623b      	str	r3, [r7, #32]
  char str_num_entero[7]; //Guardar como string
  sprintf(str_num_entero, "val=%3d", num_entero);
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	6a3a      	ldr	r2, [r7, #32]
 8000536:	4942      	ldr	r1, [pc, #264]	; (8000640 <main+0x130>)
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fdb9 	bl	80020b0 <siprintf>

  //Conversion de flotante a string
  float num_f=3.7,temporal_frac;
 800053e:	4b41      	ldr	r3, [pc, #260]	; (8000644 <main+0x134>)
 8000540:	61fb      	str	r3, [r7, #28]
  uint8_t p_entera,p_frac;
  char str_entera[2];
  char str_frac[2];
  p_entera=(uint8_t)num_f; //Parte entera
 8000542:	69f8      	ldr	r0, [r7, #28]
 8000544:	f7ff ffc4 	bl	80004d0 <__aeabi_f2uiz>
 8000548:	4603      	mov	r3, r0
 800054a:	76fb      	strb	r3, [r7, #27]
  temporal_frac=(num_f-p_entera)*100; //.7*100=70
 800054c:	7efb      	ldrb	r3, [r7, #27]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff ff6a 	bl	8000428 <__aeabi_i2f>
 8000554:	4603      	mov	r3, r0
 8000556:	4619      	mov	r1, r3
 8000558:	69f8      	ldr	r0, [r7, #28]
 800055a:	f7ff feaf 	bl	80002bc <__aeabi_fsub>
 800055e:	4603      	mov	r3, r0
 8000560:	4939      	ldr	r1, [pc, #228]	; (8000648 <main+0x138>)
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fdf2 	bl	800014c <__aeabi_fmul>
 8000568:	4603      	mov	r3, r0
 800056a:	617b      	str	r3, [r7, #20]
  p_frac=(uint8_t)temporal_frac;
 800056c:	6978      	ldr	r0, [r7, #20]
 800056e:	f7ff ffaf 	bl	80004d0 <__aeabi_f2uiz>
 8000572:	4603      	mov	r3, r0
 8000574:	74fb      	strb	r3, [r7, #19]
  sprintf(str_entera, "%2d",p_entera);
 8000576:	7efa      	ldrb	r2, [r7, #27]
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4933      	ldr	r1, [pc, #204]	; (800064c <main+0x13c>)
 800057e:	4618      	mov	r0, r3
 8000580:	f001 fd96 	bl	80020b0 <siprintf>
  sprintf(str_frac, "%2d",p_frac); //Conversion de flotante a string
 8000584:	7cfa      	ldrb	r2, [r7, #19]
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	4930      	ldr	r1, [pc, #192]	; (800064c <main+0x13c>)
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fd90 	bl	80020b0 <siprintf>

  lcd_init(); //Inicializa LCD
 8000590:	f001 fa76 	bl	8001a80 <lcd_init>

  lcd_command(DISPLAY_ON_D_OFF_C_ON_B);
 8000594:	200d      	movs	r0, #13
 8000596:	f001 fc4f 	bl	8001e38 <lcd_command>
  lcd_gotoxy(1,1);
 800059a:	2101      	movs	r1, #1
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fd17 	bl	8001fd0 <lcd_gotoxy>
  lcd_puts("Hello World!",12);
 80005a2:	210c      	movs	r1, #12
 80005a4:	482a      	ldr	r0, [pc, #168]	; (8000650 <main+0x140>)
 80005a6:	f001 fcf9 	bl	8001f9c <lcd_puts>
  lcd_gotoxy(1,2); //Segunda fila
 80005aa:	2102      	movs	r1, #2
 80005ac:	2001      	movs	r0, #1
 80005ae:	f001 fd0f 	bl	8001fd0 <lcd_gotoxy>
  lcd_puts(str_num_entero,7);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2107      	movs	r1, #7
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fcef 	bl	8001f9c <lcd_puts>
  lcd_putc(' ');
 80005be:	2020      	movs	r0, #32
 80005c0:	f001 fb88 	bl	8001cd4 <lcd_putc>
  lcd_puts(str_entera,2);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fce6 	bl	8001f9c <lcd_puts>
  lcd_putc('.');
 80005d0:	202e      	movs	r0, #46	; 0x2e
 80005d2:	f001 fb7f 	bl	8001cd4 <lcd_putc>
  lcd_puts(str_frac,2);
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fcde 	bl	8001f9c <lcd_puts>
  lcd_putc(0xe0); //Beta
 80005e0:	20e0      	movs	r0, #224	; 0xe0
 80005e2:	f001 fb77 	bl	8001cd4 <lcd_putc>
  HAL_Delay(20000);
 80005e6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80005ea:	f000 f9b3 	bl	8000954 <HAL_Delay>
  lcd_clear(); //Borra pantalla
 80005ee:	f001 fd25 	bl	800203c <lcd_clear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  if (tecla=='#')
 80005f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005f6:	2b23      	cmp	r3, #35	; 0x23
 80005f8:	d103      	bne.n	8000602 <main+0xf2>
	  lcd_gotoxy(1,2); //Brinca a segunda linea
 80005fa:	2102      	movs	r1, #2
 80005fc:	2001      	movs	r0, #1
 80005fe:	f001 fce7 	bl	8001fd0 <lcd_gotoxy>
	  tecla=keypad_read();
 8000602:	f001 f8f7 	bl	80017f4 <keypad_read>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if ((tecla!=0) && (tecla!='#')&& (tecla!='*'))
 800060c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000610:	2b00      	cmp	r3, #0
 8000612:	d00c      	beq.n	800062e <main+0x11e>
 8000614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000618:	2b23      	cmp	r3, #35	; 0x23
 800061a:	d008      	beq.n	800062e <main+0x11e>
 800061c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000620:	2b2a      	cmp	r3, #42	; 0x2a
 8000622:	d004      	beq.n	800062e <main+0x11e>
	  lcd_putc(tecla);
 8000624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fb53 	bl	8001cd4 <lcd_putc>
	  if (tecla=='*')
 800062e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000632:	2b2a      	cmp	r3, #42	; 0x2a
 8000634:	d1dd      	bne.n	80005f2 <main+0xe2>
	  lcd_command(CURSOR_MOVE_LEFT);
 8000636:	2010      	movs	r0, #16
 8000638:	f001 fbfe 	bl	8001e38 <lcd_command>
	  if (tecla=='#')
 800063c:	e7d9      	b.n	80005f2 <main+0xe2>
 800063e:	bf00      	nop
 8000640:	080029bc 	.word	0x080029bc
 8000644:	406ccccd 	.word	0x406ccccd
 8000648:	42c80000 	.word	0x42c80000
 800064c:	080029c4 	.word	0x080029c4
 8000650:	080029c8 	.word	0x080029c8

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b090      	sub	sp, #64	; 0x40
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2228      	movs	r2, #40	; 0x28
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fd1c 	bl	80020a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fc1f 	bl	8000ecc <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x44>
  {
    Error_Handler();
 8000694:	f000 f83a 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe8d 	bl	80013d0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006bc:	f000 f826 	bl	800070c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3740      	adds	r7, #64	; 0x40
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_GPIO_Init+0x40>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <MX_GPIO_Init+0x40>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_GPIO_Init+0x40>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0320 	and.w	r3, r3, #32
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_GPIO_Init+0x40>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	4a07      	ldr	r2, [pc, #28]	; (8000708 <MX_GPIO_Init+0x40>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6193      	str	r3, [r2, #24]
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_GPIO_Init+0x40>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40021000 	.word	0x40021000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_MspInit+0x5c>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <HAL_MspInit+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_MspInit+0x5c>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <HAL_MspInit+0x5c>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <HAL_MspInit+0x5c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <HAL_MspInit+0x5c>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <HAL_MspInit+0x60>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_MspInit+0x60>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	40010000 	.word	0x40010000

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f8ab 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f001 fc26 	bl	800204c <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a05      	ldr	r2, [pc, #20]	; (8000830 <_sbrk+0x64>)
 800081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20005000 	.word	0x20005000
 800082c:	00000400 	.word	0x00000400
 8000830:	2000008c 	.word	0x2000008c
 8000834:	200000a8 	.word	0x200000a8

08000838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086a:	f7ff ffe5 	bl	8000838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f001 fbf3 	bl	8002058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fe4d 	bl	8000510 <main>
  bx lr
 8000876:	4770      	bx	lr
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000880:	08002a44 	.word	0x08002a44
  ldr r2, =_sbss
 8000884:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000888:	200000a4 	.word	0x200000a4

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f92b 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff ff34 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f935 	bl	8000b4a <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008f8:	f000 f90b 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	; (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	20000090 	.word	0x20000090

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000090 	.word	0x20000090

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	f7ff ff90 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff49 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff5e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff90 	bl	8000a54 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5f 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffb0 	bl	8000ab8 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b08b      	sub	sp, #44	; 0x2c
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e169      	b.n	8000e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	f040 8158 	bne.w	8000e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4a9a      	ldr	r2, [pc, #616]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d05e      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000ba0:	4a98      	ldr	r2, [pc, #608]	; (8000e04 <HAL_GPIO_Init+0x2a0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d875      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000ba6:	4a98      	ldr	r2, [pc, #608]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d058      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bac:	4a96      	ldr	r2, [pc, #600]	; (8000e08 <HAL_GPIO_Init+0x2a4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d86f      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bb2:	4a96      	ldr	r2, [pc, #600]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d052      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bb8:	4a94      	ldr	r2, [pc, #592]	; (8000e0c <HAL_GPIO_Init+0x2a8>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d869      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bbe:	4a94      	ldr	r2, [pc, #592]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d04c      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bc4:	4a92      	ldr	r2, [pc, #584]	; (8000e10 <HAL_GPIO_Init+0x2ac>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d863      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bca:	4a92      	ldr	r2, [pc, #584]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d046      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
 8000bd0:	4a90      	ldr	r2, [pc, #576]	; (8000e14 <HAL_GPIO_Init+0x2b0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d85d      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d82a      	bhi.n	8000c30 <HAL_GPIO_Init+0xcc>
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d859      	bhi.n	8000c92 <HAL_GPIO_Init+0x12e>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <HAL_GPIO_Init+0x80>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000c5f 	.word	0x08000c5f
 8000be8:	08000c39 	.word	0x08000c39
 8000bec:	08000c4b 	.word	0x08000c4b
 8000bf0:	08000c8d 	.word	0x08000c8d
 8000bf4:	08000c93 	.word	0x08000c93
 8000bf8:	08000c93 	.word	0x08000c93
 8000bfc:	08000c93 	.word	0x08000c93
 8000c00:	08000c93 	.word	0x08000c93
 8000c04:	08000c93 	.word	0x08000c93
 8000c08:	08000c93 	.word	0x08000c93
 8000c0c:	08000c93 	.word	0x08000c93
 8000c10:	08000c93 	.word	0x08000c93
 8000c14:	08000c93 	.word	0x08000c93
 8000c18:	08000c93 	.word	0x08000c93
 8000c1c:	08000c93 	.word	0x08000c93
 8000c20:	08000c93 	.word	0x08000c93
 8000c24:	08000c93 	.word	0x08000c93
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c55 	.word	0x08000c55
 8000c30:	4a79      	ldr	r2, [pc, #484]	; (8000e18 <HAL_GPIO_Init+0x2b4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d013      	beq.n	8000c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c36:	e02c      	b.n	8000c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e029      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	3304      	adds	r3, #4
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e024      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	3308      	adds	r3, #8
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e01f      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	330c      	adds	r3, #12
 8000c5a:	623b      	str	r3, [r7, #32]
          break;
 8000c5c:	e01a      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c66:	2304      	movs	r3, #4
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e013      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d105      	bne.n	8000c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c74:	2308      	movs	r3, #8
 8000c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	611a      	str	r2, [r3, #16]
          break;
 8000c7e:	e009      	b.n	8000c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c80:	2308      	movs	r3, #8
 8000c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	615a      	str	r2, [r3, #20]
          break;
 8000c8a:	e003      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
          break;
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x130>
          break;
 8000c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d801      	bhi.n	8000c9e <HAL_GPIO_Init+0x13a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	e001      	b.n	8000ca2 <HAL_GPIO_Init+0x13e>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	2bff      	cmp	r3, #255	; 0xff
 8000ca8:	d802      	bhi.n	8000cb0 <HAL_GPIO_Init+0x14c>
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0x152>
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	3b08      	subs	r3, #8
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	210f      	movs	r1, #15
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	6a39      	ldr	r1, [r7, #32]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 80b1 	beq.w	8000e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	; (8000e1c <HAL_GPIO_Init+0x2b8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0301 	and.w	r3, r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cfc:	4a48      	ldr	r2, [pc, #288]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	220f      	movs	r2, #15
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <HAL_GPIO_Init+0x2c0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d013      	beq.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3f      	ldr	r2, [pc, #252]	; (8000e28 <HAL_GPIO_Init+0x2c4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d00d      	beq.n	8000d4c <HAL_GPIO_Init+0x1e8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a3e      	ldr	r2, [pc, #248]	; (8000e2c <HAL_GPIO_Init+0x2c8>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d007      	beq.n	8000d48 <HAL_GPIO_Init+0x1e4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a3d      	ldr	r2, [pc, #244]	; (8000e30 <HAL_GPIO_Init+0x2cc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d101      	bne.n	8000d44 <HAL_GPIO_Init+0x1e0>
 8000d40:	2303      	movs	r3, #3
 8000d42:	e006      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d44:	2304      	movs	r3, #4
 8000d46:	e004      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	e002      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <HAL_GPIO_Init+0x1ee>
 8000d50:	2300      	movs	r3, #0
 8000d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d54:	f002 0203 	and.w	r2, r2, #3
 8000d58:	0092      	lsls	r2, r2, #2
 8000d5a:	4093      	lsls	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d62:	492f      	ldr	r1, [pc, #188]	; (8000e20 <HAL_GPIO_Init+0x2bc>)
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	3302      	adds	r3, #2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d006      	beq.n	8000d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	492c      	ldr	r1, [pc, #176]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4928      	ldr	r1, [pc, #160]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d006      	beq.n	8000db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4922      	ldr	r1, [pc, #136]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
 8000db0:	e006      	b.n	8000dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	491e      	ldr	r1, [pc, #120]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	4918      	ldr	r1, [pc, #96]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4914      	ldr	r1, [pc, #80]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d021      	beq.n	8000e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	490e      	ldr	r1, [pc, #56]	; (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60cb      	str	r3, [r1, #12]
 8000e00:	e021      	b.n	8000e46 <HAL_GPIO_Init+0x2e2>
 8000e02:	bf00      	nop
 8000e04:	10320000 	.word	0x10320000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10220000 	.word	0x10220000
 8000e10:	10210000 	.word	0x10210000
 8000e14:	10120000 	.word	0x10120000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	40011000 	.word	0x40011000
 8000e30:	40011400 	.word	0x40011400
 8000e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4909      	ldr	r1, [pc, #36]	; (8000e68 <HAL_GPIO_Init+0x304>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e48:	3301      	adds	r3, #1
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f47f ae8e 	bne.w	8000b78 <HAL_GPIO_Init+0x14>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	372c      	adds	r7, #44	; 0x2c
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr

08000e9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	807b      	strh	r3, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eaa:	787b      	ldrb	r3, [r7, #1]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eb6:	e003      	b.n	8000ec0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	041a      	lsls	r2, r3, #16
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	611a      	str	r2, [r3, #16]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e272      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 8087 	beq.w	8000ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eec:	4b92      	ldr	r3, [pc, #584]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d00c      	beq.n	8000f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ef8:	4b8f      	ldr	r3, [pc, #572]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d112      	bne.n	8000f2a <HAL_RCC_OscConfig+0x5e>
 8000f04:	4b8c      	ldr	r3, [pc, #560]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f10:	d10b      	bne.n	8000f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d06c      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x12c>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d168      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e24c      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f32:	d106      	bne.n	8000f42 <HAL_RCC_OscConfig+0x76>
 8000f34:	4b80      	ldr	r3, [pc, #512]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a7f      	ldr	r2, [pc, #508]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	e02e      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0x98>
 8000f4a:	4b7b      	ldr	r3, [pc, #492]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a7a      	ldr	r2, [pc, #488]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a77      	ldr	r2, [pc, #476]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0xbc>
 8000f6e:	4b72      	ldr	r3, [pc, #456]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a71      	ldr	r2, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b6f      	ldr	r3, [pc, #444]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a6e      	ldr	r2, [pc, #440]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0xd4>
 8000f88:	4b6b      	ldr	r3, [pc, #428]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a6a      	ldr	r2, [pc, #424]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b68      	ldr	r3, [pc, #416]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a67      	ldr	r2, [pc, #412]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fcca 	bl	8000940 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcc6 	bl	8000940 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e200      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xe4>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcb6 	bl	8000940 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fcb2 	bl	8000940 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1ec      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x10c>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d063      	beq.n	80010ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001012:	4b49      	ldr	r3, [pc, #292]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b08      	cmp	r3, #8
 800101c:	d11c      	bne.n	8001058 <HAL_RCC_OscConfig+0x18c>
 800101e:	4b46      	ldr	r3, [pc, #280]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x176>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1c0      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4939      	ldr	r1, [pc, #228]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e03a      	b.n	80010ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001060:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_RCC_OscConfig+0x270>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fc6b 	bl	8000940 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fc67 	bl	8000940 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e1a1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4927      	ldr	r1, [pc, #156]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_RCC_OscConfig+0x270>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fc4a 	bl	8000940 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc46 	bl	8000940 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e180      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d03a      	beq.n	8001150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d019      	beq.n	8001116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_RCC_OscConfig+0x274>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc2a 	bl	8000940 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc26 	bl	8000940 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e160      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_RCC_OscConfig+0x26c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 faa6 	bl	8001660 <RCC_Delay>
 8001114:	e01c      	b.n	8001150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_RCC_OscConfig+0x274>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111c:	f7ff fc10 	bl	8000940 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001122:	e00f      	b.n	8001144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fc0c 	bl	8000940 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d908      	bls.n	8001144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e146      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	42420000 	.word	0x42420000
 8001140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e9      	bne.n	8001124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0304 	and.w	r3, r3, #4
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80a6 	beq.w	80012aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001162:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10d      	bne.n	800118a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a87      	ldr	r2, [pc, #540]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b85      	ldr	r3, [pc, #532]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001186:	2301      	movs	r3, #1
 8001188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118a:	4b82      	ldr	r3, [pc, #520]	; (8001394 <HAL_RCC_OscConfig+0x4c8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001196:	4b7f      	ldr	r3, [pc, #508]	; (8001394 <HAL_RCC_OscConfig+0x4c8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7e      	ldr	r2, [pc, #504]	; (8001394 <HAL_RCC_OscConfig+0x4c8>)
 800119c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fbcd 	bl	8000940 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	e008      	b.n	80011bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011aa:	f7ff fbc9 	bl	8000940 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b64      	cmp	r3, #100	; 0x64
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e103      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	4b75      	ldr	r3, [pc, #468]	; (8001394 <HAL_RCC_OscConfig+0x4c8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f0      	beq.n	80011aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x312>
 80011d0:	4b6f      	ldr	r3, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a6e      	ldr	r2, [pc, #440]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e02d      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x334>
 80011e6:	4b6a      	ldr	r3, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a69      	ldr	r2, [pc, #420]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b67      	ldr	r3, [pc, #412]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a66      	ldr	r2, [pc, #408]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6213      	str	r3, [r2, #32]
 80011fe:	e01c      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b05      	cmp	r3, #5
 8001206:	d10c      	bne.n	8001222 <HAL_RCC_OscConfig+0x356>
 8001208:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a60      	ldr	r2, [pc, #384]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	4b5e      	ldr	r3, [pc, #376]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4a5d      	ldr	r2, [pc, #372]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	6213      	str	r3, [r2, #32]
 8001220:	e00b      	b.n	800123a <HAL_RCC_OscConfig+0x36e>
 8001222:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a5a      	ldr	r2, [pc, #360]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001228:	f023 0301 	bic.w	r3, r3, #1
 800122c:	6213      	str	r3, [r2, #32]
 800122e:	4b58      	ldr	r3, [pc, #352]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	4a57      	ldr	r2, [pc, #348]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d015      	beq.n	800126e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001242:	f7ff fb7d 	bl	8000940 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001248:	e00a      	b.n	8001260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124a:	f7ff fb79 	bl	8000940 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	f241 3288 	movw	r2, #5000	; 0x1388
 8001258:	4293      	cmp	r3, r2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e0b1      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001260:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ee      	beq.n	800124a <HAL_RCC_OscConfig+0x37e>
 800126c:	e014      	b.n	8001298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fb67 	bl	8000940 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fb63 	bl	8000940 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e09b      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d105      	bne.n	80012aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8087 	beq.w	80013c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b08      	cmp	r3, #8
 80012be:	d061      	beq.n	8001384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d146      	bne.n	8001356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <HAL_RCC_OscConfig+0x4cc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb37 	bl	8000940 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d6:	f7ff fb33 	bl	8000940 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e06d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1f0      	bne.n	80012d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fc:	d108      	bne.n	8001310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4921      	ldr	r1, [pc, #132]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a19      	ldr	r1, [r3, #32]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	430b      	orrs	r3, r1
 8001322:	491b      	ldr	r1, [pc, #108]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x4cc>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132e:	f7ff fb07 	bl	8000940 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001336:	f7ff fb03 	bl	8000940 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e03d      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x46a>
 8001354:	e035      	b.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x4cc>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff faf0 	bl	8000940 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff faec 	bl	8000940 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e026      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x498>
 8001382:	e01e      	b.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d107      	bne.n	800139c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e019      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
 8001390:	40021000 	.word	0x40021000
 8001394:	40007000 	.word	0x40007000
 8001398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x500>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0d0      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b6a      	ldr	r3, [pc, #424]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d910      	bls.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 0207 	bic.w	r2, r3, #7
 80013fa:	4965      	ldr	r1, [pc, #404]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d001      	beq.n	8001414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0b8      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d020      	beq.n	8001462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800142c:	4b59      	ldr	r3, [pc, #356]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001444:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800144e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	494d      	ldr	r1, [pc, #308]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d040      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d115      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e07f      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b41      	ldr	r3, [pc, #260]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e073      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e06b      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4936      	ldr	r1, [pc, #216]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fa3e 	bl	8000940 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff fa3a 	bl	8000940 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e053      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d210      	bcs.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 0207 	bic.w	r2, r3, #7
 8001506:	4922      	ldr	r1, [pc, #136]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d001      	beq.n	8001520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e032      	b.n	8001586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	4916      	ldr	r1, [pc, #88]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	490e      	ldr	r1, [pc, #56]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	4313      	orrs	r3, r2
 800155c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800155e:	f000 f821 	bl	80015a4 <HAL_RCC_GetSysClockFreq>
 8001562:	4602      	mov	r2, r0
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	091b      	lsrs	r3, r3, #4
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	490a      	ldr	r1, [pc, #40]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	5ccb      	ldrb	r3, [r1, r3]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	4a09      	ldr	r2, [pc, #36]	; (800159c <HAL_RCC_ClockConfig+0x1cc>)
 8001578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_ClockConfig+0x1d0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f99c 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40022000 	.word	0x40022000
 8001594:	40021000 	.word	0x40021000
 8001598:	080029f8 	.word	0x080029f8
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004

080015a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a4:	b490      	push	{r4, r7}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_RCC_GetSysClockFreq+0xac>)
 80015ac:	1d3c      	adds	r4, r7, #4
 80015ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015b4:	f240 2301 	movw	r3, #513	; 0x201
 80015b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b04      	cmp	r3, #4
 80015dc:	d002      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x40>
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d003      	beq.n	80015ea <HAL_RCC_GetSysClockFreq+0x46>
 80015e2:	e02b      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e6:	623b      	str	r3, [r7, #32]
      break;
 80015e8:	e02b      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3328      	adds	r3, #40	; 0x28
 80015f4:	443b      	add	r3, r7
 80015f6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015fa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d012      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	0c5b      	lsrs	r3, r3, #17
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	3328      	adds	r3, #40	; 0x28
 8001612:	443b      	add	r3, r7
 8001614:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001618:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800161e:	fb03 f202 	mul.w	r2, r3, r2
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	e004      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	623b      	str	r3, [r7, #32]
      break;
 800163a:	e002      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_GetSysClockFreq+0xb4>)
 800163e:	623b      	str	r3, [r7, #32]
      break;
 8001640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001642:	6a3b      	ldr	r3, [r7, #32]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bc90      	pop	{r4, r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	080029d8 	.word	0x080029d8
 8001654:	40021000 	.word	0x40021000
 8001658:	007a1200 	.word	0x007a1200
 800165c:	003d0900 	.word	0x003d0900

08001660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001668:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <RCC_Delay+0x34>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <RCC_Delay+0x38>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0a5b      	lsrs	r3, r3, #9
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	fb02 f303 	mul.w	r3, r2, r3
 800167a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800167c:	bf00      	nop
  }
  while (Delay --);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e5a      	subs	r2, r3, #1
 8001682:	60fa      	str	r2, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f9      	bne.n	800167c <RCC_Delay+0x1c>
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <keypad_init>:
#include "stm32f1xx_hal.h"
#include "keypad.h"

void keypad_init(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b51      	ldr	r3, [pc, #324]	; (80017e8 <keypad_init+0x14c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4a50      	ldr	r2, [pc, #320]	; (80017e8 <keypad_init+0x14c>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6193      	str	r3, [r2, #24]
 80016ae:	4b4e      	ldr	r3, [pc, #312]	; (80017e8 <keypad_init+0x14c>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <keypad_init+0x14c>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <keypad_init+0x14c>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6193      	str	r3, [r2, #24]
 80016c6:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <keypad_init+0x14c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
	
	
  GPIO_InitStruct.Pin 	= ROW1_PIN;
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2302      	movs	r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW1_PORT, &GPIO_InitStruct);
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	4619      	mov	r1, r3
 80016e8:	4840      	ldr	r0, [pc, #256]	; (80017ec <keypad_init+0x150>)
 80016ea:	f7ff fa3b 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW2_PIN;
 80016ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2302      	movs	r3, #2
 80016fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW2_PORT, &GPIO_InitStruct);
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4619      	mov	r1, r3
 8001706:	4839      	ldr	r0, [pc, #228]	; (80017ec <keypad_init+0x150>)
 8001708:	f7ff fa2c 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW3_PIN;
 800170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001710:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW3_PORT, &GPIO_InitStruct);
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4619      	mov	r1, r3
 8001724:	4831      	ldr	r0, [pc, #196]	; (80017ec <keypad_init+0x150>)
 8001726:	f7ff fa1d 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= ROW4_PIN;
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2302      	movs	r3, #2
 800173a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ROW4_PORT, &GPIO_InitStruct);
 800173c:	f107 0308 	add.w	r3, r7, #8
 8001740:	4619      	mov	r1, r3
 8001742:	482a      	ldr	r0, [pc, #168]	; (80017ec <keypad_init+0x150>)
 8001744:	f7ff fa0e 	bl	8000b64 <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4827      	ldr	r0, [pc, #156]	; (80017ec <keypad_init+0x150>)
 800174e:	f7ff fba4 	bl	8000e9a <HAL_GPIO_WritePin>
	
  HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4824      	ldr	r0, [pc, #144]	; (80017ec <keypad_init+0x150>)
 800175a:	f7ff fb9e 	bl	8000e9a <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001764:	4821      	ldr	r0, [pc, #132]	; (80017ec <keypad_init+0x150>)
 8001766:	f7ff fb98 	bl	8000e9a <HAL_GPIO_WritePin>
	
	HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <keypad_init+0x150>)
 8001772:	f7ff fb92 	bl	8000e9a <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin 	= COL1_PIN;
 8001776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800177a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL1_PORT, &GPIO_InitStruct);
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	4818      	ldr	r0, [pc, #96]	; (80017ec <keypad_init+0x150>)
 800178c:	f7ff f9ea 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL2_PIN;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL2_PORT, &GPIO_InitStruct);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <keypad_init+0x150>)
 80017a6:	f7ff f9dd 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL3_PIN;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL3_PORT, &GPIO_InitStruct);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4619      	mov	r1, r3
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <keypad_init+0x154>)
 80017c0:	f7ff f9d0 	bl	8000b64 <HAL_GPIO_Init>
	
	GPIO_InitStruct.Pin 	= COL4_PIN;
 80017c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode 	= GPIO_MODE_INPUT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull 	= GPIO_PULLUP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL4_PORT, &GPIO_InitStruct);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <keypad_init+0x154>)
 80017da:	f7ff f9c3 	bl	8000b64 <HAL_GPIO_Init>
		
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40010800 	.word	0x40010800

080017f4 <keypad_read>:

char keypad_read(void){
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
	char letras[4][4]={	{'1','2','3','A'},
 80017fa:	4b9e      	ldr	r3, [pc, #632]	; (8001a74 <keypad_read+0x280>)
 80017fc:	463c      	mov	r4, r7
 80017fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
										{'4','5','6','B'},
										{'7','8','9','C'},
										{'*','0','#','D'}};
	int  i=0;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
	char valor=0;
 8001808:	2300      	movs	r3, #0
 800180a:	74fb      	strb	r3, [r7, #19]


	for(i=0;i<4;i++){
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e126      	b.n	8001a60 <keypad_read+0x26c>
		if(i==0){
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d145      	bne.n	80018a4 <keypad_read+0xb0>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181e:	4896      	ldr	r0, [pc, #600]	; (8001a78 <keypad_read+0x284>)
 8001820:	f7ff fb3b 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	4893      	ldr	r0, [pc, #588]	; (8001a78 <keypad_read+0x284>)
 800182c:	f7ff fb35 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001836:	4890      	ldr	r0, [pc, #576]	; (8001a78 <keypad_read+0x284>)
 8001838:	f7ff fb2f 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_RESET);
 800183c:	2200      	movs	r2, #0
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	488d      	ldr	r0, [pc, #564]	; (8001a78 <keypad_read+0x284>)
 8001842:	f7ff fb2a 	bl	8000e9a <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 8001846:	200a      	movs	r0, #10
 8001848:	f7ff f884 	bl	8000954 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[0][0];}	//1
 800184c:	e001      	b.n	8001852 <keypad_read+0x5e>
 800184e:	783b      	ldrb	r3, [r7, #0]
 8001850:	74fb      	strb	r3, [r7, #19]
 8001852:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001856:	4888      	ldr	r0, [pc, #544]	; (8001a78 <keypad_read+0x284>)
 8001858:	f7ff fb08 	bl	8000e6c <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f5      	beq.n	800184e <keypad_read+0x5a>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[0][1];}	//2
 8001862:	e001      	b.n	8001868 <keypad_read+0x74>
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	74fb      	strb	r3, [r7, #19]
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	4882      	ldr	r0, [pc, #520]	; (8001a78 <keypad_read+0x284>)
 800186e:	f7ff fafd 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f5      	beq.n	8001864 <keypad_read+0x70>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[0][2];}	//3
 8001878:	e001      	b.n	800187e <keypad_read+0x8a>
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	74fb      	strb	r3, [r7, #19]
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	487e      	ldr	r0, [pc, #504]	; (8001a7c <keypad_read+0x288>)
 8001884:	f7ff faf2 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f5      	beq.n	800187a <keypad_read+0x86>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[0][3];}	//A
 800188e:	e001      	b.n	8001894 <keypad_read+0xa0>
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	74fb      	strb	r3, [r7, #19]
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	4878      	ldr	r0, [pc, #480]	; (8001a7c <keypad_read+0x288>)
 800189a:	f7ff fae7 	bl	8000e6c <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f5      	beq.n	8001890 <keypad_read+0x9c>
		}

		if(i==1){
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d145      	bne.n	8001936 <keypad_read+0x142>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	4872      	ldr	r0, [pc, #456]	; (8001a78 <keypad_read+0x284>)
 80018b0:	f7ff faf3 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,	GPIO_PIN_SET);
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ba:	486f      	ldr	r0, [pc, #444]	; (8001a78 <keypad_read+0x284>)
 80018bc:	f7ff faed 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c6:	486c      	ldr	r0, [pc, #432]	; (8001a78 <keypad_read+0x284>)
 80018c8:	f7ff fae7 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,  GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d2:	4869      	ldr	r0, [pc, #420]	; (8001a78 <keypad_read+0x284>)
 80018d4:	f7ff fae1 	bl	8000e9a <HAL_GPIO_WritePin>

			HAL_Delay(10);
 80018d8:	200a      	movs	r0, #10
 80018da:	f7ff f83b 	bl	8000954 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[1][0];}	//4
 80018de:	e001      	b.n	80018e4 <keypad_read+0xf0>
 80018e0:	793b      	ldrb	r3, [r7, #4]
 80018e2:	74fb      	strb	r3, [r7, #19]
 80018e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e8:	4863      	ldr	r0, [pc, #396]	; (8001a78 <keypad_read+0x284>)
 80018ea:	f7ff fabf 	bl	8000e6c <HAL_GPIO_ReadPin>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f5      	beq.n	80018e0 <keypad_read+0xec>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[1][1];}	//5
 80018f4:	e001      	b.n	80018fa <keypad_read+0x106>
 80018f6:	797b      	ldrb	r3, [r7, #5]
 80018f8:	74fb      	strb	r3, [r7, #19]
 80018fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fe:	485e      	ldr	r0, [pc, #376]	; (8001a78 <keypad_read+0x284>)
 8001900:	f7ff fab4 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f5      	beq.n	80018f6 <keypad_read+0x102>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[1][2];}	//6
 800190a:	e001      	b.n	8001910 <keypad_read+0x11c>
 800190c:	79bb      	ldrb	r3, [r7, #6]
 800190e:	74fb      	strb	r3, [r7, #19]
 8001910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001914:	4859      	ldr	r0, [pc, #356]	; (8001a7c <keypad_read+0x288>)
 8001916:	f7ff faa9 	bl	8000e6c <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f5      	beq.n	800190c <keypad_read+0x118>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[1][3];}	//B
 8001920:	e001      	b.n	8001926 <keypad_read+0x132>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	74fb      	strb	r3, [r7, #19]
 8001926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192a:	4854      	ldr	r0, [pc, #336]	; (8001a7c <keypad_read+0x288>)
 800192c:	f7ff fa9e 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f5      	beq.n	8001922 <keypad_read+0x12e>
		}

		if(i==2){
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d145      	bne.n	80019c8 <keypad_read+0x1d4>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2180      	movs	r1, #128	; 0x80
 8001940:	484d      	ldr	r0, [pc, #308]	; (8001a78 <keypad_read+0x284>)
 8001942:	f7ff faaa 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194c:	484a      	ldr	r0, [pc, #296]	; (8001a78 <keypad_read+0x284>)
 800194e:	f7ff faa4 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_SET);
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001958:	4847      	ldr	r0, [pc, #284]	; (8001a78 <keypad_read+0x284>)
 800195a:	f7ff fa9e 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001964:	4844      	ldr	r0, [pc, #272]	; (8001a78 <keypad_read+0x284>)
 8001966:	f7ff fa98 	bl	8000e9a <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f7fe fff2 	bl	8000954 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[2][0];}	//7
 8001970:	e001      	b.n	8001976 <keypad_read+0x182>
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	74fb      	strb	r3, [r7, #19]
 8001976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197a:	483f      	ldr	r0, [pc, #252]	; (8001a78 <keypad_read+0x284>)
 800197c:	f7ff fa76 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f5      	beq.n	8001972 <keypad_read+0x17e>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[2][1];}	//8
 8001986:	e001      	b.n	800198c <keypad_read+0x198>
 8001988:	7a7b      	ldrb	r3, [r7, #9]
 800198a:	74fb      	strb	r3, [r7, #19]
 800198c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001990:	4839      	ldr	r0, [pc, #228]	; (8001a78 <keypad_read+0x284>)
 8001992:	f7ff fa6b 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f5      	beq.n	8001988 <keypad_read+0x194>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[2][2];}	//9
 800199c:	e001      	b.n	80019a2 <keypad_read+0x1ae>
 800199e:	7abb      	ldrb	r3, [r7, #10]
 80019a0:	74fb      	strb	r3, [r7, #19]
 80019a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a6:	4835      	ldr	r0, [pc, #212]	; (8001a7c <keypad_read+0x288>)
 80019a8:	f7ff fa60 	bl	8000e6c <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f5      	beq.n	800199e <keypad_read+0x1aa>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[2][3];}	//C
 80019b2:	e001      	b.n	80019b8 <keypad_read+0x1c4>
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	74fb      	strb	r3, [r7, #19]
 80019b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019bc:	482f      	ldr	r0, [pc, #188]	; (8001a7c <keypad_read+0x288>)
 80019be:	f7ff fa55 	bl	8000e6c <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f5      	beq.n	80019b4 <keypad_read+0x1c0>
		}

		if(i==3){
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d145      	bne.n	8001a5a <keypad_read+0x266>
			HAL_GPIO_WritePin(ROW1_PORT, ROW1_PIN,  GPIO_PIN_SET);
 80019ce:	2201      	movs	r2, #1
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	4829      	ldr	r0, [pc, #164]	; (8001a78 <keypad_read+0x284>)
 80019d4:	f7ff fa61 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_PORT, ROW2_PIN,	GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019de:	4826      	ldr	r0, [pc, #152]	; (8001a78 <keypad_read+0x284>)
 80019e0:	f7ff fa5b 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_PORT, ROW3_PIN,  GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ea:	4823      	ldr	r0, [pc, #140]	; (8001a78 <keypad_read+0x284>)
 80019ec:	f7ff fa55 	bl	8000e9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_PORT, ROW4_PIN,  GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f6:	4820      	ldr	r0, [pc, #128]	; (8001a78 <keypad_read+0x284>)
 80019f8:	f7ff fa4f 	bl	8000e9a <HAL_GPIO_WritePin>
			
			HAL_Delay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f7fe ffa9 	bl	8000954 <HAL_Delay>
			while ( ( HAL_GPIO_ReadPin(COL1_PORT, COL1_PIN) ) == 0 ){valor=letras[3][0];}	//*
 8001a02:	e001      	b.n	8001a08 <keypad_read+0x214>
 8001a04:	7b3b      	ldrb	r3, [r7, #12]
 8001a06:	74fb      	strb	r3, [r7, #19]
 8001a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a0c:	481a      	ldr	r0, [pc, #104]	; (8001a78 <keypad_read+0x284>)
 8001a0e:	f7ff fa2d 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f5      	beq.n	8001a04 <keypad_read+0x210>
			while ( ( HAL_GPIO_ReadPin(COL2_PORT, COL2_PIN) ) == 0 ){valor=letras[3][1];}	//0
 8001a18:	e001      	b.n	8001a1e <keypad_read+0x22a>
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
 8001a1c:	74fb      	strb	r3, [r7, #19]
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	4815      	ldr	r0, [pc, #84]	; (8001a78 <keypad_read+0x284>)
 8001a24:	f7ff fa22 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f5      	beq.n	8001a1a <keypad_read+0x226>
			while ( ( HAL_GPIO_ReadPin(COL3_PORT, COL3_PIN) ) == 0 ){valor=letras[3][2];}	//+
 8001a2e:	e001      	b.n	8001a34 <keypad_read+0x240>
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	74fb      	strb	r3, [r7, #19]
 8001a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a38:	4810      	ldr	r0, [pc, #64]	; (8001a7c <keypad_read+0x288>)
 8001a3a:	f7ff fa17 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f5      	beq.n	8001a30 <keypad_read+0x23c>
			while ( ( HAL_GPIO_ReadPin(COL4_PORT, COL4_PIN) ) == 0 ){valor=letras[3][3];}	//D
 8001a44:	e001      	b.n	8001a4a <keypad_read+0x256>
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	74fb      	strb	r3, [r7, #19]
 8001a4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4e:	480b      	ldr	r0, [pc, #44]	; (8001a7c <keypad_read+0x288>)
 8001a50:	f7ff fa0c 	bl	8000e6c <HAL_GPIO_ReadPin>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f5      	beq.n	8001a46 <keypad_read+0x252>
	for(i=0;i<4;i++){
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	f77f aed5 	ble.w	8001812 <keypad_read+0x1e>
		}
	}
	
	return valor;
 8001a68:	7cfb      	ldrb	r3, [r7, #19]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	080029e8 	.word	0x080029e8
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40010800 	.word	0x40010800

08001a80 <lcd_init>:

		return ch;
}
*/
void lcd_init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <lcd_init+0x248>)
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4a8f      	ldr	r2, [pc, #572]	; (8001cc8 <lcd_init+0x248>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b8d      	ldr	r3, [pc, #564]	; (8001cc8 <lcd_init+0x248>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <lcd_init+0x248>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a89      	ldr	r2, [pc, #548]	; (8001cc8 <lcd_init+0x248>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b87      	ldr	r3, [pc, #540]	; (8001cc8 <lcd_init+0x248>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <lcd_init+0x248>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a83      	ldr	r2, [pc, #524]	; (8001cc8 <lcd_init+0x248>)
 8001abc:	f043 0310 	orr.w	r3, r3, #16
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b81      	ldr	r3, [pc, #516]	; (8001cc8 <lcd_init+0x248>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin 	= LCDRS_PIN;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDRS_PORT, &GPIO_InitStruct);
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4879      	ldr	r0, [pc, #484]	; (8001ccc <lcd_init+0x24c>)
 8001ae6:	f7ff f83d 	bl	8000b64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCDE_PIN;
 8001aea:	2310      	movs	r3, #16
 8001aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCDE_PORT, &GPIO_InitStruct);
 8001afa:	f107 0310 	add.w	r3, r7, #16
 8001afe:	4619      	mov	r1, r3
 8001b00:	4872      	ldr	r0, [pc, #456]	; (8001ccc <lcd_init+0x24c>)
 8001b02:	f7ff f82f 	bl	8000b64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD4_PIN;
 8001b06:	2308      	movs	r3, #8
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD4_PORT, &GPIO_InitStruct);
 8001b16:	f107 0310 	add.w	r3, r7, #16
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	486c      	ldr	r0, [pc, #432]	; (8001cd0 <lcd_init+0x250>)
 8001b1e:	f7ff f821 	bl	8000b64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD5_PIN;
 8001b22:	2310      	movs	r3, #16
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD5_PORT, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	4865      	ldr	r0, [pc, #404]	; (8001cd0 <lcd_init+0x250>)
 8001b3a:	f7ff f813 	bl	8000b64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD6_PIN;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD6_PORT, &GPIO_InitStruct);
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	485e      	ldr	r0, [pc, #376]	; (8001cd0 <lcd_init+0x250>)
 8001b56:	f7ff f805 	bl	8000b64 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin 	= LCD7_PIN;
 8001b5a:	2340      	movs	r3, #64	; 0x40
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD7_PORT, &GPIO_InitStruct);
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4857      	ldr	r0, [pc, #348]	; (8001cd0 <lcd_init+0x250>)
 8001b72:	f7fe fff7 	bl	8000b64 <HAL_GPIO_Init>

	HAL_Delay(15);
 8001b76:	200f      	movs	r0, #15
 8001b78:	f7fe feec 	bl	8000954 <HAL_Delay>
	LCD7_OFF; LCD6_OFF; LCD5_OFF; LCD4_OFF;
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	4853      	ldr	r0, [pc, #332]	; (8001cd0 <lcd_init+0x250>)
 8001b82:	f7ff f98a 	bl	8000e9a <HAL_GPIO_WritePin>
 8001b86:	2200      	movs	r2, #0
 8001b88:	2120      	movs	r1, #32
 8001b8a:	4851      	ldr	r0, [pc, #324]	; (8001cd0 <lcd_init+0x250>)
 8001b8c:	f7ff f985 	bl	8000e9a <HAL_GPIO_WritePin>
 8001b90:	2200      	movs	r2, #0
 8001b92:	2110      	movs	r1, #16
 8001b94:	484e      	ldr	r0, [pc, #312]	; (8001cd0 <lcd_init+0x250>)
 8001b96:	f7ff f980 	bl	8000e9a <HAL_GPIO_WritePin>
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	484c      	ldr	r0, [pc, #304]	; (8001cd0 <lcd_init+0x250>)
 8001ba0:	f7ff f97b 	bl	8000e9a <HAL_GPIO_WritePin>
	LCDE_OFF;
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	4848      	ldr	r0, [pc, #288]	; (8001ccc <lcd_init+0x24c>)
 8001baa:	f7ff f976 	bl	8000e9a <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4846      	ldr	r0, [pc, #280]	; (8001ccc <lcd_init+0x24c>)
 8001bb4:	f7ff f971 	bl	8000e9a <HAL_GPIO_WritePin>
	//---------one------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2140      	movs	r1, #64	; 0x40
 8001bbc:	4844      	ldr	r0, [pc, #272]	; (8001cd0 <lcd_init+0x250>)
 8001bbe:	f7ff f96c 	bl	8000e9a <HAL_GPIO_WritePin>
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2120      	movs	r1, #32
 8001bc6:	4842      	ldr	r0, [pc, #264]	; (8001cd0 <lcd_init+0x250>)
 8001bc8:	f7ff f967 	bl	8000e9a <HAL_GPIO_WritePin>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2110      	movs	r1, #16
 8001bd0:	483f      	ldr	r0, [pc, #252]	; (8001cd0 <lcd_init+0x250>)
 8001bd2:	f7ff f962 	bl	8000e9a <HAL_GPIO_WritePin>
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2108      	movs	r1, #8
 8001bda:	483d      	ldr	r0, [pc, #244]	; (8001cd0 <lcd_init+0x250>)
 8001bdc:	f7ff f95d 	bl	8000e9a <HAL_GPIO_WritePin>
	LCDE_ON;
 8001be0:	2201      	movs	r2, #1
 8001be2:	2110      	movs	r1, #16
 8001be4:	4839      	ldr	r0, [pc, #228]	; (8001ccc <lcd_init+0x24c>)
 8001be6:	f7ff f958 	bl	8000e9a <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001bea:	2200      	movs	r2, #0
 8001bec:	2120      	movs	r1, #32
 8001bee:	4837      	ldr	r0, [pc, #220]	; (8001ccc <lcd_init+0x24c>)
 8001bf0:	f7ff f953 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001bf4:	200a      	movs	r0, #10
 8001bf6:	f7fe fead 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2110      	movs	r1, #16
 8001bfe:	4833      	ldr	r0, [pc, #204]	; (8001ccc <lcd_init+0x24c>)
 8001c00:	f7ff f94b 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c04:	200a      	movs	r0, #10
 8001c06:	f7fe fea5 	bl	8000954 <HAL_Delay>
	//-----------two-----------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_ON;
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	4830      	ldr	r0, [pc, #192]	; (8001cd0 <lcd_init+0x250>)
 8001c10:	f7ff f943 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c14:	2200      	movs	r2, #0
 8001c16:	2120      	movs	r1, #32
 8001c18:	482d      	ldr	r0, [pc, #180]	; (8001cd0 <lcd_init+0x250>)
 8001c1a:	f7ff f93e 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2110      	movs	r1, #16
 8001c22:	482b      	ldr	r0, [pc, #172]	; (8001cd0 <lcd_init+0x250>)
 8001c24:	f7ff f939 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4828      	ldr	r0, [pc, #160]	; (8001cd0 <lcd_init+0x250>)
 8001c2e:	f7ff f934 	bl	8000e9a <HAL_GPIO_WritePin>
	LCDE_ON;
 8001c32:	2201      	movs	r2, #1
 8001c34:	2110      	movs	r1, #16
 8001c36:	4825      	ldr	r0, [pc, #148]	; (8001ccc <lcd_init+0x24c>)
 8001c38:	f7ff f92f 	bl	8000e9a <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2120      	movs	r1, #32
 8001c40:	4822      	ldr	r0, [pc, #136]	; (8001ccc <lcd_init+0x24c>)
 8001c42:	f7ff f92a 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c46:	200a      	movs	r0, #10
 8001c48:	f7fe fe84 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2110      	movs	r1, #16
 8001c50:	481e      	ldr	r0, [pc, #120]	; (8001ccc <lcd_init+0x24c>)
 8001c52:	f7ff f922 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c56:	200a      	movs	r0, #10
 8001c58:	f7fe fe7c 	bl	8000954 <HAL_Delay>
	//-------three-------------
	LCD7_OFF; LCD6_OFF; LCD5_ON; LCD4_OFF;
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	481b      	ldr	r0, [pc, #108]	; (8001cd0 <lcd_init+0x250>)
 8001c62:	f7ff f91a 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c66:	2200      	movs	r2, #0
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4819      	ldr	r0, [pc, #100]	; (8001cd0 <lcd_init+0x250>)
 8001c6c:	f7ff f915 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c70:	2201      	movs	r2, #1
 8001c72:	2110      	movs	r1, #16
 8001c74:	4816      	ldr	r0, [pc, #88]	; (8001cd0 <lcd_init+0x250>)
 8001c76:	f7ff f910 	bl	8000e9a <HAL_GPIO_WritePin>
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2108      	movs	r1, #8
 8001c7e:	4814      	ldr	r0, [pc, #80]	; (8001cd0 <lcd_init+0x250>)
 8001c80:	f7ff f90b 	bl	8000e9a <HAL_GPIO_WritePin>
	LCDE_ON;
 8001c84:	2201      	movs	r2, #1
 8001c86:	2110      	movs	r1, #16
 8001c88:	4810      	ldr	r0, [pc, #64]	; (8001ccc <lcd_init+0x24c>)
 8001c8a:	f7ff f906 	bl	8000e9a <HAL_GPIO_WritePin>
	//LCDRW_OFF;
	LCDRS_OFF;
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	480e      	ldr	r0, [pc, #56]	; (8001ccc <lcd_init+0x24c>)
 8001c94:	f7ff f901 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f7fe fe5b 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	480a      	ldr	r0, [pc, #40]	; (8001ccc <lcd_init+0x24c>)
 8001ca4:	f7ff f8f9 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f7fe fe53 	bl	8000954 <HAL_Delay>
	//--------4 bit--dual line--5x8 dots---------------
	lcd_command(SETLCD_4BITS_2LINE);
 8001cae:	2028      	movs	r0, #40	; 0x28
 8001cb0:	f000 f8c2 	bl	8001e38 <lcd_command>
	//-----increment address, invisible cursor shift------
	lcd_command(DISPLAY_ON_D_OFF_CB);
 8001cb4:	200c      	movs	r0, #12
 8001cb6:	f000 f8bf 	bl	8001e38 <lcd_command>
	//-----Clear display
	lcd_clear();
 8001cba:	f000 f9bf 	bl	800203c <lcd_clear>
}
 8001cbe:	bf00      	nop
 8001cc0:	3720      	adds	r7, #32
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <lcd_putc>:

void lcd_putc(unsigned char ch){		//Sends Char to LCD
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]

	LCDRS_ON;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4853      	ldr	r0, [pc, #332]	; (8001e30 <lcd_putc+0x15c>)
 8001ce4:	f7ff f8d9 	bl	8000e9a <HAL_GPIO_WritePin>

  if ( ch & 0x10 ) {
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <lcd_putc+0x2a>
		LCD4_ON;
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2108      	movs	r1, #8
 8001cf6:	484f      	ldr	r0, [pc, #316]	; (8001e34 <lcd_putc+0x160>)
 8001cf8:	f7ff f8cf 	bl	8000e9a <HAL_GPIO_WritePin>
 8001cfc:	e004      	b.n	8001d08 <lcd_putc+0x34>
	} else {
		LCD4_OFF;
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2108      	movs	r1, #8
 8001d02:	484c      	ldr	r0, [pc, #304]	; (8001e34 <lcd_putc+0x160>)
 8001d04:	f7ff f8c9 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x20 ) {
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <lcd_putc+0x4a>
		LCD5_ON;
 8001d12:	2201      	movs	r2, #1
 8001d14:	2110      	movs	r1, #16
 8001d16:	4847      	ldr	r0, [pc, #284]	; (8001e34 <lcd_putc+0x160>)
 8001d18:	f7ff f8bf 	bl	8000e9a <HAL_GPIO_WritePin>
 8001d1c:	e004      	b.n	8001d28 <lcd_putc+0x54>
	} else {
    LCD5_OFF;
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2110      	movs	r1, #16
 8001d22:	4844      	ldr	r0, [pc, #272]	; (8001e34 <lcd_putc+0x160>)
 8001d24:	f7ff f8b9 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x40 ) {
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <lcd_putc+0x6a>
		LCD6_ON;
 8001d32:	2201      	movs	r2, #1
 8001d34:	2120      	movs	r1, #32
 8001d36:	483f      	ldr	r0, [pc, #252]	; (8001e34 <lcd_putc+0x160>)
 8001d38:	f7ff f8af 	bl	8000e9a <HAL_GPIO_WritePin>
 8001d3c:	e004      	b.n	8001d48 <lcd_putc+0x74>
	} else {
		LCD6_OFF;
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2120      	movs	r1, #32
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <lcd_putc+0x160>)
 8001d44:	f7ff f8a9 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x80 ) {
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da05      	bge.n	8001d5c <lcd_putc+0x88>
		LCD7_ON;
 8001d50:	2201      	movs	r2, #1
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4837      	ldr	r0, [pc, #220]	; (8001e34 <lcd_putc+0x160>)
 8001d56:	f7ff f8a0 	bl	8000e9a <HAL_GPIO_WritePin>
 8001d5a:	e004      	b.n	8001d66 <lcd_putc+0x92>
	} else {
		LCD7_OFF;
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	4834      	ldr	r0, [pc, #208]	; (8001e34 <lcd_putc+0x160>)
 8001d62:	f7ff f89a 	bl	8000e9a <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001d66:	2201      	movs	r2, #1
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4831      	ldr	r0, [pc, #196]	; (8001e30 <lcd_putc+0x15c>)
 8001d6c:	f7ff f895 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7fe fdef 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001d76:	2200      	movs	r2, #0
 8001d78:	2110      	movs	r1, #16
 8001d7a:	482d      	ldr	r0, [pc, #180]	; (8001e30 <lcd_putc+0x15c>)
 8001d7c:	f7ff f88d 	bl	8000e9a <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7fe fde7 	bl	8000954 <HAL_Delay>

	if ( ch & 0x01 ) {
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <lcd_putc+0xc8>
		LCD4_ON;
 8001d90:	2201      	movs	r2, #1
 8001d92:	2108      	movs	r1, #8
 8001d94:	4827      	ldr	r0, [pc, #156]	; (8001e34 <lcd_putc+0x160>)
 8001d96:	f7ff f880 	bl	8000e9a <HAL_GPIO_WritePin>
 8001d9a:	e004      	b.n	8001da6 <lcd_putc+0xd2>
	} else {
		LCD4_OFF;
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2108      	movs	r1, #8
 8001da0:	4824      	ldr	r0, [pc, #144]	; (8001e34 <lcd_putc+0x160>)
 8001da2:	f7ff f87a 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x02 ) {
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <lcd_putc+0xe8>
		LCD5_ON;
 8001db0:	2201      	movs	r2, #1
 8001db2:	2110      	movs	r1, #16
 8001db4:	481f      	ldr	r0, [pc, #124]	; (8001e34 <lcd_putc+0x160>)
 8001db6:	f7ff f870 	bl	8000e9a <HAL_GPIO_WritePin>
 8001dba:	e004      	b.n	8001dc6 <lcd_putc+0xf2>
	} else {
    LCD5_OFF;
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	481c      	ldr	r0, [pc, #112]	; (8001e34 <lcd_putc+0x160>)
 8001dc2:	f7ff f86a 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x04 ) {
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <lcd_putc+0x108>
		LCD6_ON;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2120      	movs	r1, #32
 8001dd4:	4817      	ldr	r0, [pc, #92]	; (8001e34 <lcd_putc+0x160>)
 8001dd6:	f7ff f860 	bl	8000e9a <HAL_GPIO_WritePin>
 8001dda:	e004      	b.n	8001de6 <lcd_putc+0x112>
	} else {
    LCD6_OFF;
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2120      	movs	r1, #32
 8001de0:	4814      	ldr	r0, [pc, #80]	; (8001e34 <lcd_putc+0x160>)
 8001de2:	f7ff f85a 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( ch & 0x08 ) {
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <lcd_putc+0x128>
		LCD7_ON;
 8001df0:	2201      	movs	r2, #1
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	480f      	ldr	r0, [pc, #60]	; (8001e34 <lcd_putc+0x160>)
 8001df6:	f7ff f850 	bl	8000e9a <HAL_GPIO_WritePin>
 8001dfa:	e004      	b.n	8001e06 <lcd_putc+0x132>
	} else {
    LCD7_OFF;
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2140      	movs	r1, #64	; 0x40
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <lcd_putc+0x160>)
 8001e02:	f7ff f84a 	bl	8000e9a <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001e06:	2201      	movs	r2, #1
 8001e08:	2110      	movs	r1, #16
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <lcd_putc+0x15c>)
 8001e0c:	f7ff f845 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7fe fd9f 	bl	8000954 <HAL_Delay>
  LCDE_OFF;
 8001e16:	2200      	movs	r2, #0
 8001e18:	2110      	movs	r1, #16
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <lcd_putc+0x15c>)
 8001e1c:	f7ff f83d 	bl	8000e9a <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7fe fd97 	bl	8000954 <HAL_Delay>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00

08001e38 <lcd_command>:
void lcd_command(unsigned char cmd){	//Sends Command to LCD
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]

	LCDRS_OFF;
 8001e42:	2200      	movs	r2, #0
 8001e44:	2120      	movs	r1, #32
 8001e46:	4853      	ldr	r0, [pc, #332]	; (8001f94 <lcd_command+0x15c>)
 8001e48:	f7ff f827 	bl	8000e9a <HAL_GPIO_WritePin>

	if ( cmd & 0x10 ) {
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <lcd_command+0x2a>
		LCD4_ON;
 8001e56:	2201      	movs	r2, #1
 8001e58:	2108      	movs	r1, #8
 8001e5a:	484f      	ldr	r0, [pc, #316]	; (8001f98 <lcd_command+0x160>)
 8001e5c:	f7ff f81d 	bl	8000e9a <HAL_GPIO_WritePin>
 8001e60:	e004      	b.n	8001e6c <lcd_command+0x34>
	} else {
		LCD4_OFF;
 8001e62:	2200      	movs	r2, #0
 8001e64:	2108      	movs	r1, #8
 8001e66:	484c      	ldr	r0, [pc, #304]	; (8001f98 <lcd_command+0x160>)
 8001e68:	f7ff f817 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x20 ) {
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <lcd_command+0x4a>
		LCD5_ON;
 8001e76:	2201      	movs	r2, #1
 8001e78:	2110      	movs	r1, #16
 8001e7a:	4847      	ldr	r0, [pc, #284]	; (8001f98 <lcd_command+0x160>)
 8001e7c:	f7ff f80d 	bl	8000e9a <HAL_GPIO_WritePin>
 8001e80:	e004      	b.n	8001e8c <lcd_command+0x54>
	} else {
		LCD5_OFF;
 8001e82:	2200      	movs	r2, #0
 8001e84:	2110      	movs	r1, #16
 8001e86:	4844      	ldr	r0, [pc, #272]	; (8001f98 <lcd_command+0x160>)
 8001e88:	f7ff f807 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x40 ) {
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <lcd_command+0x6a>
		LCD6_ON;
 8001e96:	2201      	movs	r2, #1
 8001e98:	2120      	movs	r1, #32
 8001e9a:	483f      	ldr	r0, [pc, #252]	; (8001f98 <lcd_command+0x160>)
 8001e9c:	f7fe fffd 	bl	8000e9a <HAL_GPIO_WritePin>
 8001ea0:	e004      	b.n	8001eac <lcd_command+0x74>
	} else {
		LCD6_OFF;
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	483c      	ldr	r0, [pc, #240]	; (8001f98 <lcd_command+0x160>)
 8001ea8:	f7fe fff7 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x80 ) {
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da05      	bge.n	8001ec0 <lcd_command+0x88>
		LCD7_ON;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	4837      	ldr	r0, [pc, #220]	; (8001f98 <lcd_command+0x160>)
 8001eba:	f7fe ffee 	bl	8000e9a <HAL_GPIO_WritePin>
 8001ebe:	e004      	b.n	8001eca <lcd_command+0x92>
	} else {
		LCD7_OFF;
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2140      	movs	r1, #64	; 0x40
 8001ec4:	4834      	ldr	r0, [pc, #208]	; (8001f98 <lcd_command+0x160>)
 8001ec6:	f7fe ffe8 	bl	8000e9a <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2110      	movs	r1, #16
 8001ece:	4831      	ldr	r0, [pc, #196]	; (8001f94 <lcd_command+0x15c>)
 8001ed0:	f7fe ffe3 	bl	8000e9a <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7fe fd3d 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001eda:	2200      	movs	r2, #0
 8001edc:	2110      	movs	r1, #16
 8001ede:	482d      	ldr	r0, [pc, #180]	; (8001f94 <lcd_command+0x15c>)
 8001ee0:	f7fe ffdb 	bl	8000e9a <HAL_GPIO_WritePin>
  HAL_Delay(1);//__delay_us(300);
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7fe fd35 	bl	8000954 <HAL_Delay>

	if ( cmd & 0x01 ) {
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <lcd_command+0xc8>
		LCD4_ON;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2108      	movs	r1, #8
 8001ef8:	4827      	ldr	r0, [pc, #156]	; (8001f98 <lcd_command+0x160>)
 8001efa:	f7fe ffce 	bl	8000e9a <HAL_GPIO_WritePin>
 8001efe:	e004      	b.n	8001f0a <lcd_command+0xd2>
	} else {
		LCD4_OFF;
 8001f00:	2200      	movs	r2, #0
 8001f02:	2108      	movs	r1, #8
 8001f04:	4824      	ldr	r0, [pc, #144]	; (8001f98 <lcd_command+0x160>)
 8001f06:	f7fe ffc8 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x02 ) {
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <lcd_command+0xe8>
		LCD5_ON;
 8001f14:	2201      	movs	r2, #1
 8001f16:	2110      	movs	r1, #16
 8001f18:	481f      	ldr	r0, [pc, #124]	; (8001f98 <lcd_command+0x160>)
 8001f1a:	f7fe ffbe 	bl	8000e9a <HAL_GPIO_WritePin>
 8001f1e:	e004      	b.n	8001f2a <lcd_command+0xf2>
	} else {
		LCD5_OFF;
 8001f20:	2200      	movs	r2, #0
 8001f22:	2110      	movs	r1, #16
 8001f24:	481c      	ldr	r0, [pc, #112]	; (8001f98 <lcd_command+0x160>)
 8001f26:	f7fe ffb8 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x04 ) {
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d005      	beq.n	8001f40 <lcd_command+0x108>
		LCD6_ON;
 8001f34:	2201      	movs	r2, #1
 8001f36:	2120      	movs	r1, #32
 8001f38:	4817      	ldr	r0, [pc, #92]	; (8001f98 <lcd_command+0x160>)
 8001f3a:	f7fe ffae 	bl	8000e9a <HAL_GPIO_WritePin>
 8001f3e:	e004      	b.n	8001f4a <lcd_command+0x112>
	} else {
		LCD6_OFF;
 8001f40:	2200      	movs	r2, #0
 8001f42:	2120      	movs	r1, #32
 8001f44:	4814      	ldr	r0, [pc, #80]	; (8001f98 <lcd_command+0x160>)
 8001f46:	f7fe ffa8 	bl	8000e9a <HAL_GPIO_WritePin>
	}
	if ( cmd & 0x08 ) {
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <lcd_command+0x128>
		LCD7_ON;
 8001f54:	2201      	movs	r2, #1
 8001f56:	2140      	movs	r1, #64	; 0x40
 8001f58:	480f      	ldr	r0, [pc, #60]	; (8001f98 <lcd_command+0x160>)
 8001f5a:	f7fe ff9e 	bl	8000e9a <HAL_GPIO_WritePin>
 8001f5e:	e004      	b.n	8001f6a <lcd_command+0x132>
	} else {
		LCD7_OFF;
 8001f60:	2200      	movs	r2, #0
 8001f62:	2140      	movs	r1, #64	; 0x40
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <lcd_command+0x160>)
 8001f66:	f7fe ff98 	bl	8000e9a <HAL_GPIO_WritePin>
	}

	LCDE_ON;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <lcd_command+0x15c>)
 8001f70:	f7fe ff93 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7fe fced 	bl	8000954 <HAL_Delay>
	LCDE_OFF;
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2110      	movs	r1, #16
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <lcd_command+0x15c>)
 8001f80:	f7fe ff8b 	bl	8000e9a <HAL_GPIO_WritePin>
	HAL_Delay(1);//__delay_us(300);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7fe fce5 	bl	8000954 <HAL_Delay>

}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40010800 	.word	0x40010800
 8001f98:	40010c00 	.word	0x40010c00

08001f9c <lcd_puts>:

void lcd_puts(unsigned char* data, unsigned char nBytes){	//Outputs string to LCD
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
	register unsigned char i=0;

	for(i=0; i<nBytes; i++){	// print data
 8001fa8:	2400      	movs	r4, #0
 8001faa:	e009      	b.n	8001fc0 <lcd_puts+0x24>
		lcd_putc(data[i]);
 8001fac:	4622      	mov	r2, r4
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fe8d 	bl	8001cd4 <lcd_putc>
	for(i=0; i<nBytes; i++){	// print data
 8001fba:	4623      	mov	r3, r4
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	b2dc      	uxtb	r4, r3
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	d8f2      	bhi.n	8001fac <lcd_puts+0x10>
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd90      	pop	{r4, r7, pc}

08001fd0 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y){		//Cursor to X Y position
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
	register unsigned char DDRAMAddr;

	switch(y){		// remap lines into proper order
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d81b      	bhi.n	8002020 <lcd_gotoxy+0x50>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <lcd_gotoxy+0x20>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002009 	.word	0x08002009
 8001ff8:	08002011 	.word	0x08002011
 8001ffc:	08002019 	.word	0x08002019
	case 1: DDRAMAddr = LCD_LINE0_DDRAMADDR+x-1; break;
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	3b01      	subs	r3, #1
 8002004:	b2dc      	uxtb	r4, r3
 8002006:	e00f      	b.n	8002028 <lcd_gotoxy+0x58>
	case 2: DDRAMAddr = LCD_LINE1_DDRAMADDR+x-1; break;
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	333f      	adds	r3, #63	; 0x3f
 800200c:	b2dc      	uxtb	r4, r3
 800200e:	e00b      	b.n	8002028 <lcd_gotoxy+0x58>
	case 3: DDRAMAddr = LCD_LINE2_DDRAMADDR+x-1; break;
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	3313      	adds	r3, #19
 8002014:	b2dc      	uxtb	r4, r3
 8002016:	e007      	b.n	8002028 <lcd_gotoxy+0x58>
	case 4: DDRAMAddr = LCD_LINE3_DDRAMADDR+x-1; break;
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	3353      	adds	r3, #83	; 0x53
 800201c:	b2dc      	uxtb	r4, r3
 800201e:	e003      	b.n	8002028 <lcd_gotoxy+0x58>
	default: DDRAMAddr =LCD_LINE0_DDRAMADDR+x-1;break;
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3b01      	subs	r3, #1
 8002024:	b2dc      	uxtb	r4, r3
 8002026:	bf00      	nop
	}
	lcd_command(1<<LCD_DDRAM|DDRAMAddr);	// set data address
 8002028:	f064 037f 	orn	r3, r4, #127	; 0x7f
 800202c:	b2db      	uxtb	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff02 	bl	8001e38 <lcd_command>
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}

0800203c <lcd_clear>:
        lcd_command(a++);			//	incrementa la direccion para la data
		lcd_putc(car[i]);			//	escribe caracter
	}
}

void lcd_clear(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
    lcd_command(CLEAR_DISPLAY);
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff fef9 	bl	8001e38 <lcd_command>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <__errno>:
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <__errno+0x8>)
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <__libc_init_array>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	2600      	movs	r6, #0
 800205c:	4d0c      	ldr	r5, [pc, #48]	; (8002090 <__libc_init_array+0x38>)
 800205e:	4c0d      	ldr	r4, [pc, #52]	; (8002094 <__libc_init_array+0x3c>)
 8002060:	1b64      	subs	r4, r4, r5
 8002062:	10a4      	asrs	r4, r4, #2
 8002064:	42a6      	cmp	r6, r4
 8002066:	d109      	bne.n	800207c <__libc_init_array+0x24>
 8002068:	f000 fc9c 	bl	80029a4 <_init>
 800206c:	2600      	movs	r6, #0
 800206e:	4d0a      	ldr	r5, [pc, #40]	; (8002098 <__libc_init_array+0x40>)
 8002070:	4c0a      	ldr	r4, [pc, #40]	; (800209c <__libc_init_array+0x44>)
 8002072:	1b64      	subs	r4, r4, r5
 8002074:	10a4      	asrs	r4, r4, #2
 8002076:	42a6      	cmp	r6, r4
 8002078:	d105      	bne.n	8002086 <__libc_init_array+0x2e>
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002080:	4798      	blx	r3
 8002082:	3601      	adds	r6, #1
 8002084:	e7ee      	b.n	8002064 <__libc_init_array+0xc>
 8002086:	f855 3b04 	ldr.w	r3, [r5], #4
 800208a:	4798      	blx	r3
 800208c:	3601      	adds	r6, #1
 800208e:	e7f2      	b.n	8002076 <__libc_init_array+0x1e>
 8002090:	08002a3c 	.word	0x08002a3c
 8002094:	08002a3c 	.word	0x08002a3c
 8002098:	08002a3c 	.word	0x08002a3c
 800209c:	08002a40 	.word	0x08002a40

080020a0 <memset>:
 80020a0:	4603      	mov	r3, r0
 80020a2:	4402      	add	r2, r0
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d100      	bne.n	80020aa <memset+0xa>
 80020a8:	4770      	bx	lr
 80020aa:	f803 1b01 	strb.w	r1, [r3], #1
 80020ae:	e7f9      	b.n	80020a4 <memset+0x4>

080020b0 <siprintf>:
 80020b0:	b40e      	push	{r1, r2, r3}
 80020b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80020b6:	b500      	push	{lr}
 80020b8:	b09c      	sub	sp, #112	; 0x70
 80020ba:	ab1d      	add	r3, sp, #116	; 0x74
 80020bc:	9002      	str	r0, [sp, #8]
 80020be:	9006      	str	r0, [sp, #24]
 80020c0:	9107      	str	r1, [sp, #28]
 80020c2:	9104      	str	r1, [sp, #16]
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <siprintf+0x38>)
 80020c6:	4909      	ldr	r1, [pc, #36]	; (80020ec <siprintf+0x3c>)
 80020c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80020cc:	9105      	str	r1, [sp, #20]
 80020ce:	6800      	ldr	r0, [r0, #0]
 80020d0:	a902      	add	r1, sp, #8
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	f000 f868 	bl	80021a8 <_svfiprintf_r>
 80020d8:	2200      	movs	r2, #0
 80020da:	9b02      	ldr	r3, [sp, #8]
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	b01c      	add	sp, #112	; 0x70
 80020e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80020e4:	b003      	add	sp, #12
 80020e6:	4770      	bx	lr
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	ffff0208 	.word	0xffff0208

080020f0 <__ssputs_r>:
 80020f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f4:	688e      	ldr	r6, [r1, #8]
 80020f6:	4682      	mov	sl, r0
 80020f8:	429e      	cmp	r6, r3
 80020fa:	460c      	mov	r4, r1
 80020fc:	4690      	mov	r8, r2
 80020fe:	461f      	mov	r7, r3
 8002100:	d838      	bhi.n	8002174 <__ssputs_r+0x84>
 8002102:	898a      	ldrh	r2, [r1, #12]
 8002104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002108:	d032      	beq.n	8002170 <__ssputs_r+0x80>
 800210a:	6825      	ldr	r5, [r4, #0]
 800210c:	6909      	ldr	r1, [r1, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	eba5 0901 	sub.w	r9, r5, r1
 8002114:	6965      	ldr	r5, [r4, #20]
 8002116:	444b      	add	r3, r9
 8002118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800211c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002120:	106d      	asrs	r5, r5, #1
 8002122:	429d      	cmp	r5, r3
 8002124:	bf38      	it	cc
 8002126:	461d      	movcc	r5, r3
 8002128:	0553      	lsls	r3, r2, #21
 800212a:	d531      	bpl.n	8002190 <__ssputs_r+0xa0>
 800212c:	4629      	mov	r1, r5
 800212e:	f000 fb6f 	bl	8002810 <_malloc_r>
 8002132:	4606      	mov	r6, r0
 8002134:	b950      	cbnz	r0, 800214c <__ssputs_r+0x5c>
 8002136:	230c      	movs	r3, #12
 8002138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800213c:	f8ca 3000 	str.w	r3, [sl]
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002146:	81a3      	strh	r3, [r4, #12]
 8002148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214c:	464a      	mov	r2, r9
 800214e:	6921      	ldr	r1, [r4, #16]
 8002150:	f000 face 	bl	80026f0 <memcpy>
 8002154:	89a3      	ldrh	r3, [r4, #12]
 8002156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800215a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215e:	81a3      	strh	r3, [r4, #12]
 8002160:	6126      	str	r6, [r4, #16]
 8002162:	444e      	add	r6, r9
 8002164:	6026      	str	r6, [r4, #0]
 8002166:	463e      	mov	r6, r7
 8002168:	6165      	str	r5, [r4, #20]
 800216a:	eba5 0509 	sub.w	r5, r5, r9
 800216e:	60a5      	str	r5, [r4, #8]
 8002170:	42be      	cmp	r6, r7
 8002172:	d900      	bls.n	8002176 <__ssputs_r+0x86>
 8002174:	463e      	mov	r6, r7
 8002176:	4632      	mov	r2, r6
 8002178:	4641      	mov	r1, r8
 800217a:	6820      	ldr	r0, [r4, #0]
 800217c:	f000 fac6 	bl	800270c <memmove>
 8002180:	68a3      	ldr	r3, [r4, #8]
 8002182:	2000      	movs	r0, #0
 8002184:	1b9b      	subs	r3, r3, r6
 8002186:	60a3      	str	r3, [r4, #8]
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	4433      	add	r3, r6
 800218c:	6023      	str	r3, [r4, #0]
 800218e:	e7db      	b.n	8002148 <__ssputs_r+0x58>
 8002190:	462a      	mov	r2, r5
 8002192:	f000 fbb1 	bl	80028f8 <_realloc_r>
 8002196:	4606      	mov	r6, r0
 8002198:	2800      	cmp	r0, #0
 800219a:	d1e1      	bne.n	8002160 <__ssputs_r+0x70>
 800219c:	4650      	mov	r0, sl
 800219e:	6921      	ldr	r1, [r4, #16]
 80021a0:	f000 face 	bl	8002740 <_free_r>
 80021a4:	e7c7      	b.n	8002136 <__ssputs_r+0x46>
	...

080021a8 <_svfiprintf_r>:
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ac:	4698      	mov	r8, r3
 80021ae:	898b      	ldrh	r3, [r1, #12]
 80021b0:	4607      	mov	r7, r0
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	460d      	mov	r5, r1
 80021b6:	4614      	mov	r4, r2
 80021b8:	b09d      	sub	sp, #116	; 0x74
 80021ba:	d50e      	bpl.n	80021da <_svfiprintf_r+0x32>
 80021bc:	690b      	ldr	r3, [r1, #16]
 80021be:	b963      	cbnz	r3, 80021da <_svfiprintf_r+0x32>
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	f000 fb25 	bl	8002810 <_malloc_r>
 80021c6:	6028      	str	r0, [r5, #0]
 80021c8:	6128      	str	r0, [r5, #16]
 80021ca:	b920      	cbnz	r0, 80021d6 <_svfiprintf_r+0x2e>
 80021cc:	230c      	movs	r3, #12
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d4:	e0d1      	b.n	800237a <_svfiprintf_r+0x1d2>
 80021d6:	2340      	movs	r3, #64	; 0x40
 80021d8:	616b      	str	r3, [r5, #20]
 80021da:	2300      	movs	r3, #0
 80021dc:	9309      	str	r3, [sp, #36]	; 0x24
 80021de:	2320      	movs	r3, #32
 80021e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021e4:	2330      	movs	r3, #48	; 0x30
 80021e6:	f04f 0901 	mov.w	r9, #1
 80021ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002394 <_svfiprintf_r+0x1ec>
 80021f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021f6:	4623      	mov	r3, r4
 80021f8:	469a      	mov	sl, r3
 80021fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021fe:	b10a      	cbz	r2, 8002204 <_svfiprintf_r+0x5c>
 8002200:	2a25      	cmp	r2, #37	; 0x25
 8002202:	d1f9      	bne.n	80021f8 <_svfiprintf_r+0x50>
 8002204:	ebba 0b04 	subs.w	fp, sl, r4
 8002208:	d00b      	beq.n	8002222 <_svfiprintf_r+0x7a>
 800220a:	465b      	mov	r3, fp
 800220c:	4622      	mov	r2, r4
 800220e:	4629      	mov	r1, r5
 8002210:	4638      	mov	r0, r7
 8002212:	f7ff ff6d 	bl	80020f0 <__ssputs_r>
 8002216:	3001      	adds	r0, #1
 8002218:	f000 80aa 	beq.w	8002370 <_svfiprintf_r+0x1c8>
 800221c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800221e:	445a      	add	r2, fp
 8002220:	9209      	str	r2, [sp, #36]	; 0x24
 8002222:	f89a 3000 	ldrb.w	r3, [sl]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 80a2 	beq.w	8002370 <_svfiprintf_r+0x1c8>
 800222c:	2300      	movs	r3, #0
 800222e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002236:	f10a 0a01 	add.w	sl, sl, #1
 800223a:	9304      	str	r3, [sp, #16]
 800223c:	9307      	str	r3, [sp, #28]
 800223e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002242:	931a      	str	r3, [sp, #104]	; 0x68
 8002244:	4654      	mov	r4, sl
 8002246:	2205      	movs	r2, #5
 8002248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800224c:	4851      	ldr	r0, [pc, #324]	; (8002394 <_svfiprintf_r+0x1ec>)
 800224e:	f000 fa41 	bl	80026d4 <memchr>
 8002252:	9a04      	ldr	r2, [sp, #16]
 8002254:	b9d8      	cbnz	r0, 800228e <_svfiprintf_r+0xe6>
 8002256:	06d0      	lsls	r0, r2, #27
 8002258:	bf44      	itt	mi
 800225a:	2320      	movmi	r3, #32
 800225c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002260:	0711      	lsls	r1, r2, #28
 8002262:	bf44      	itt	mi
 8002264:	232b      	movmi	r3, #43	; 0x2b
 8002266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800226a:	f89a 3000 	ldrb.w	r3, [sl]
 800226e:	2b2a      	cmp	r3, #42	; 0x2a
 8002270:	d015      	beq.n	800229e <_svfiprintf_r+0xf6>
 8002272:	4654      	mov	r4, sl
 8002274:	2000      	movs	r0, #0
 8002276:	f04f 0c0a 	mov.w	ip, #10
 800227a:	9a07      	ldr	r2, [sp, #28]
 800227c:	4621      	mov	r1, r4
 800227e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002282:	3b30      	subs	r3, #48	; 0x30
 8002284:	2b09      	cmp	r3, #9
 8002286:	d94e      	bls.n	8002326 <_svfiprintf_r+0x17e>
 8002288:	b1b0      	cbz	r0, 80022b8 <_svfiprintf_r+0x110>
 800228a:	9207      	str	r2, [sp, #28]
 800228c:	e014      	b.n	80022b8 <_svfiprintf_r+0x110>
 800228e:	eba0 0308 	sub.w	r3, r0, r8
 8002292:	fa09 f303 	lsl.w	r3, r9, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	46a2      	mov	sl, r4
 800229a:	9304      	str	r3, [sp, #16]
 800229c:	e7d2      	b.n	8002244 <_svfiprintf_r+0x9c>
 800229e:	9b03      	ldr	r3, [sp, #12]
 80022a0:	1d19      	adds	r1, r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	9103      	str	r1, [sp, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bfbb      	ittet	lt
 80022aa:	425b      	neglt	r3, r3
 80022ac:	f042 0202 	orrlt.w	r2, r2, #2
 80022b0:	9307      	strge	r3, [sp, #28]
 80022b2:	9307      	strlt	r3, [sp, #28]
 80022b4:	bfb8      	it	lt
 80022b6:	9204      	strlt	r2, [sp, #16]
 80022b8:	7823      	ldrb	r3, [r4, #0]
 80022ba:	2b2e      	cmp	r3, #46	; 0x2e
 80022bc:	d10c      	bne.n	80022d8 <_svfiprintf_r+0x130>
 80022be:	7863      	ldrb	r3, [r4, #1]
 80022c0:	2b2a      	cmp	r3, #42	; 0x2a
 80022c2:	d135      	bne.n	8002330 <_svfiprintf_r+0x188>
 80022c4:	9b03      	ldr	r3, [sp, #12]
 80022c6:	3402      	adds	r4, #2
 80022c8:	1d1a      	adds	r2, r3, #4
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	9203      	str	r2, [sp, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bfb8      	it	lt
 80022d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022d6:	9305      	str	r3, [sp, #20]
 80022d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002398 <_svfiprintf_r+0x1f0>
 80022dc:	2203      	movs	r2, #3
 80022de:	4650      	mov	r0, sl
 80022e0:	7821      	ldrb	r1, [r4, #0]
 80022e2:	f000 f9f7 	bl	80026d4 <memchr>
 80022e6:	b140      	cbz	r0, 80022fa <_svfiprintf_r+0x152>
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	eba0 000a 	sub.w	r0, r0, sl
 80022ee:	fa03 f000 	lsl.w	r0, r3, r0
 80022f2:	9b04      	ldr	r3, [sp, #16]
 80022f4:	3401      	adds	r4, #1
 80022f6:	4303      	orrs	r3, r0
 80022f8:	9304      	str	r3, [sp, #16]
 80022fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022fe:	2206      	movs	r2, #6
 8002300:	4826      	ldr	r0, [pc, #152]	; (800239c <_svfiprintf_r+0x1f4>)
 8002302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002306:	f000 f9e5 	bl	80026d4 <memchr>
 800230a:	2800      	cmp	r0, #0
 800230c:	d038      	beq.n	8002380 <_svfiprintf_r+0x1d8>
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <_svfiprintf_r+0x1f8>)
 8002310:	bb1b      	cbnz	r3, 800235a <_svfiprintf_r+0x1b2>
 8002312:	9b03      	ldr	r3, [sp, #12]
 8002314:	3307      	adds	r3, #7
 8002316:	f023 0307 	bic.w	r3, r3, #7
 800231a:	3308      	adds	r3, #8
 800231c:	9303      	str	r3, [sp, #12]
 800231e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002320:	4433      	add	r3, r6
 8002322:	9309      	str	r3, [sp, #36]	; 0x24
 8002324:	e767      	b.n	80021f6 <_svfiprintf_r+0x4e>
 8002326:	460c      	mov	r4, r1
 8002328:	2001      	movs	r0, #1
 800232a:	fb0c 3202 	mla	r2, ip, r2, r3
 800232e:	e7a5      	b.n	800227c <_svfiprintf_r+0xd4>
 8002330:	2300      	movs	r3, #0
 8002332:	f04f 0c0a 	mov.w	ip, #10
 8002336:	4619      	mov	r1, r3
 8002338:	3401      	adds	r4, #1
 800233a:	9305      	str	r3, [sp, #20]
 800233c:	4620      	mov	r0, r4
 800233e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002342:	3a30      	subs	r2, #48	; 0x30
 8002344:	2a09      	cmp	r2, #9
 8002346:	d903      	bls.n	8002350 <_svfiprintf_r+0x1a8>
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0c5      	beq.n	80022d8 <_svfiprintf_r+0x130>
 800234c:	9105      	str	r1, [sp, #20]
 800234e:	e7c3      	b.n	80022d8 <_svfiprintf_r+0x130>
 8002350:	4604      	mov	r4, r0
 8002352:	2301      	movs	r3, #1
 8002354:	fb0c 2101 	mla	r1, ip, r1, r2
 8002358:	e7f0      	b.n	800233c <_svfiprintf_r+0x194>
 800235a:	ab03      	add	r3, sp, #12
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	462a      	mov	r2, r5
 8002360:	4638      	mov	r0, r7
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <_svfiprintf_r+0x1fc>)
 8002364:	a904      	add	r1, sp, #16
 8002366:	f3af 8000 	nop.w
 800236a:	1c42      	adds	r2, r0, #1
 800236c:	4606      	mov	r6, r0
 800236e:	d1d6      	bne.n	800231e <_svfiprintf_r+0x176>
 8002370:	89ab      	ldrh	r3, [r5, #12]
 8002372:	065b      	lsls	r3, r3, #25
 8002374:	f53f af2c 	bmi.w	80021d0 <_svfiprintf_r+0x28>
 8002378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800237a:	b01d      	add	sp, #116	; 0x74
 800237c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002380:	ab03      	add	r3, sp, #12
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	462a      	mov	r2, r5
 8002386:	4638      	mov	r0, r7
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <_svfiprintf_r+0x1fc>)
 800238a:	a904      	add	r1, sp, #16
 800238c:	f000 f87c 	bl	8002488 <_printf_i>
 8002390:	e7eb      	b.n	800236a <_svfiprintf_r+0x1c2>
 8002392:	bf00      	nop
 8002394:	08002a08 	.word	0x08002a08
 8002398:	08002a0e 	.word	0x08002a0e
 800239c:	08002a12 	.word	0x08002a12
 80023a0:	00000000 	.word	0x00000000
 80023a4:	080020f1 	.word	0x080020f1

080023a8 <_printf_common>:
 80023a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023ac:	4616      	mov	r6, r2
 80023ae:	4699      	mov	r9, r3
 80023b0:	688a      	ldr	r2, [r1, #8]
 80023b2:	690b      	ldr	r3, [r1, #16]
 80023b4:	4607      	mov	r7, r0
 80023b6:	4293      	cmp	r3, r2
 80023b8:	bfb8      	it	lt
 80023ba:	4613      	movlt	r3, r2
 80023bc:	6033      	str	r3, [r6, #0]
 80023be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023c2:	460c      	mov	r4, r1
 80023c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023c8:	b10a      	cbz	r2, 80023ce <_printf_common+0x26>
 80023ca:	3301      	adds	r3, #1
 80023cc:	6033      	str	r3, [r6, #0]
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	0699      	lsls	r1, r3, #26
 80023d2:	bf42      	ittt	mi
 80023d4:	6833      	ldrmi	r3, [r6, #0]
 80023d6:	3302      	addmi	r3, #2
 80023d8:	6033      	strmi	r3, [r6, #0]
 80023da:	6825      	ldr	r5, [r4, #0]
 80023dc:	f015 0506 	ands.w	r5, r5, #6
 80023e0:	d106      	bne.n	80023f0 <_printf_common+0x48>
 80023e2:	f104 0a19 	add.w	sl, r4, #25
 80023e6:	68e3      	ldr	r3, [r4, #12]
 80023e8:	6832      	ldr	r2, [r6, #0]
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	42ab      	cmp	r3, r5
 80023ee:	dc28      	bgt.n	8002442 <_printf_common+0x9a>
 80023f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023f4:	1e13      	subs	r3, r2, #0
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	bf18      	it	ne
 80023fa:	2301      	movne	r3, #1
 80023fc:	0692      	lsls	r2, r2, #26
 80023fe:	d42d      	bmi.n	800245c <_printf_common+0xb4>
 8002400:	4649      	mov	r1, r9
 8002402:	4638      	mov	r0, r7
 8002404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002408:	47c0      	blx	r8
 800240a:	3001      	adds	r0, #1
 800240c:	d020      	beq.n	8002450 <_printf_common+0xa8>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	68e5      	ldr	r5, [r4, #12]
 8002412:	f003 0306 	and.w	r3, r3, #6
 8002416:	2b04      	cmp	r3, #4
 8002418:	bf18      	it	ne
 800241a:	2500      	movne	r5, #0
 800241c:	6832      	ldr	r2, [r6, #0]
 800241e:	f04f 0600 	mov.w	r6, #0
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	bf08      	it	eq
 8002426:	1aad      	subeq	r5, r5, r2
 8002428:	6922      	ldr	r2, [r4, #16]
 800242a:	bf08      	it	eq
 800242c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002430:	4293      	cmp	r3, r2
 8002432:	bfc4      	itt	gt
 8002434:	1a9b      	subgt	r3, r3, r2
 8002436:	18ed      	addgt	r5, r5, r3
 8002438:	341a      	adds	r4, #26
 800243a:	42b5      	cmp	r5, r6
 800243c:	d11a      	bne.n	8002474 <_printf_common+0xcc>
 800243e:	2000      	movs	r0, #0
 8002440:	e008      	b.n	8002454 <_printf_common+0xac>
 8002442:	2301      	movs	r3, #1
 8002444:	4652      	mov	r2, sl
 8002446:	4649      	mov	r1, r9
 8002448:	4638      	mov	r0, r7
 800244a:	47c0      	blx	r8
 800244c:	3001      	adds	r0, #1
 800244e:	d103      	bne.n	8002458 <_printf_common+0xb0>
 8002450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002458:	3501      	adds	r5, #1
 800245a:	e7c4      	b.n	80023e6 <_printf_common+0x3e>
 800245c:	2030      	movs	r0, #48	; 0x30
 800245e:	18e1      	adds	r1, r4, r3
 8002460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800246a:	4422      	add	r2, r4
 800246c:	3302      	adds	r3, #2
 800246e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002472:	e7c5      	b.n	8002400 <_printf_common+0x58>
 8002474:	2301      	movs	r3, #1
 8002476:	4622      	mov	r2, r4
 8002478:	4649      	mov	r1, r9
 800247a:	4638      	mov	r0, r7
 800247c:	47c0      	blx	r8
 800247e:	3001      	adds	r0, #1
 8002480:	d0e6      	beq.n	8002450 <_printf_common+0xa8>
 8002482:	3601      	adds	r6, #1
 8002484:	e7d9      	b.n	800243a <_printf_common+0x92>
	...

08002488 <_printf_i>:
 8002488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800248c:	7e0f      	ldrb	r7, [r1, #24]
 800248e:	4691      	mov	r9, r2
 8002490:	2f78      	cmp	r7, #120	; 0x78
 8002492:	4680      	mov	r8, r0
 8002494:	460c      	mov	r4, r1
 8002496:	469a      	mov	sl, r3
 8002498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800249a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800249e:	d807      	bhi.n	80024b0 <_printf_i+0x28>
 80024a0:	2f62      	cmp	r7, #98	; 0x62
 80024a2:	d80a      	bhi.n	80024ba <_printf_i+0x32>
 80024a4:	2f00      	cmp	r7, #0
 80024a6:	f000 80d9 	beq.w	800265c <_printf_i+0x1d4>
 80024aa:	2f58      	cmp	r7, #88	; 0x58
 80024ac:	f000 80a4 	beq.w	80025f8 <_printf_i+0x170>
 80024b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024b8:	e03a      	b.n	8002530 <_printf_i+0xa8>
 80024ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024be:	2b15      	cmp	r3, #21
 80024c0:	d8f6      	bhi.n	80024b0 <_printf_i+0x28>
 80024c2:	a101      	add	r1, pc, #4	; (adr r1, 80024c8 <_printf_i+0x40>)
 80024c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024c8:	08002521 	.word	0x08002521
 80024cc:	08002535 	.word	0x08002535
 80024d0:	080024b1 	.word	0x080024b1
 80024d4:	080024b1 	.word	0x080024b1
 80024d8:	080024b1 	.word	0x080024b1
 80024dc:	080024b1 	.word	0x080024b1
 80024e0:	08002535 	.word	0x08002535
 80024e4:	080024b1 	.word	0x080024b1
 80024e8:	080024b1 	.word	0x080024b1
 80024ec:	080024b1 	.word	0x080024b1
 80024f0:	080024b1 	.word	0x080024b1
 80024f4:	08002643 	.word	0x08002643
 80024f8:	08002565 	.word	0x08002565
 80024fc:	08002625 	.word	0x08002625
 8002500:	080024b1 	.word	0x080024b1
 8002504:	080024b1 	.word	0x080024b1
 8002508:	08002665 	.word	0x08002665
 800250c:	080024b1 	.word	0x080024b1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024b1 	.word	0x080024b1
 8002518:	080024b1 	.word	0x080024b1
 800251c:	0800262d 	.word	0x0800262d
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	1d1a      	adds	r2, r3, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	602a      	str	r2, [r5, #0]
 8002528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800252c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002530:	2301      	movs	r3, #1
 8002532:	e0a4      	b.n	800267e <_printf_i+0x1f6>
 8002534:	6820      	ldr	r0, [r4, #0]
 8002536:	6829      	ldr	r1, [r5, #0]
 8002538:	0606      	lsls	r6, r0, #24
 800253a:	f101 0304 	add.w	r3, r1, #4
 800253e:	d50a      	bpl.n	8002556 <_printf_i+0xce>
 8002540:	680e      	ldr	r6, [r1, #0]
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	2e00      	cmp	r6, #0
 8002546:	da03      	bge.n	8002550 <_printf_i+0xc8>
 8002548:	232d      	movs	r3, #45	; 0x2d
 800254a:	4276      	negs	r6, r6
 800254c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002550:	230a      	movs	r3, #10
 8002552:	485e      	ldr	r0, [pc, #376]	; (80026cc <_printf_i+0x244>)
 8002554:	e019      	b.n	800258a <_printf_i+0x102>
 8002556:	680e      	ldr	r6, [r1, #0]
 8002558:	f010 0f40 	tst.w	r0, #64	; 0x40
 800255c:	602b      	str	r3, [r5, #0]
 800255e:	bf18      	it	ne
 8002560:	b236      	sxthne	r6, r6
 8002562:	e7ef      	b.n	8002544 <_printf_i+0xbc>
 8002564:	682b      	ldr	r3, [r5, #0]
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	6029      	str	r1, [r5, #0]
 800256c:	0601      	lsls	r1, r0, #24
 800256e:	d501      	bpl.n	8002574 <_printf_i+0xec>
 8002570:	681e      	ldr	r6, [r3, #0]
 8002572:	e002      	b.n	800257a <_printf_i+0xf2>
 8002574:	0646      	lsls	r6, r0, #25
 8002576:	d5fb      	bpl.n	8002570 <_printf_i+0xe8>
 8002578:	881e      	ldrh	r6, [r3, #0]
 800257a:	2f6f      	cmp	r7, #111	; 0x6f
 800257c:	bf0c      	ite	eq
 800257e:	2308      	moveq	r3, #8
 8002580:	230a      	movne	r3, #10
 8002582:	4852      	ldr	r0, [pc, #328]	; (80026cc <_printf_i+0x244>)
 8002584:	2100      	movs	r1, #0
 8002586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800258a:	6865      	ldr	r5, [r4, #4]
 800258c:	2d00      	cmp	r5, #0
 800258e:	bfa8      	it	ge
 8002590:	6821      	ldrge	r1, [r4, #0]
 8002592:	60a5      	str	r5, [r4, #8]
 8002594:	bfa4      	itt	ge
 8002596:	f021 0104 	bicge.w	r1, r1, #4
 800259a:	6021      	strge	r1, [r4, #0]
 800259c:	b90e      	cbnz	r6, 80025a2 <_printf_i+0x11a>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d04d      	beq.n	800263e <_printf_i+0x1b6>
 80025a2:	4615      	mov	r5, r2
 80025a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80025a8:	fb03 6711 	mls	r7, r3, r1, r6
 80025ac:	5dc7      	ldrb	r7, [r0, r7]
 80025ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025b2:	4637      	mov	r7, r6
 80025b4:	42bb      	cmp	r3, r7
 80025b6:	460e      	mov	r6, r1
 80025b8:	d9f4      	bls.n	80025a4 <_printf_i+0x11c>
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d10b      	bne.n	80025d6 <_printf_i+0x14e>
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	07de      	lsls	r6, r3, #31
 80025c2:	d508      	bpl.n	80025d6 <_printf_i+0x14e>
 80025c4:	6923      	ldr	r3, [r4, #16]
 80025c6:	6861      	ldr	r1, [r4, #4]
 80025c8:	4299      	cmp	r1, r3
 80025ca:	bfde      	ittt	le
 80025cc:	2330      	movle	r3, #48	; 0x30
 80025ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80025d6:	1b52      	subs	r2, r2, r5
 80025d8:	6122      	str	r2, [r4, #16]
 80025da:	464b      	mov	r3, r9
 80025dc:	4621      	mov	r1, r4
 80025de:	4640      	mov	r0, r8
 80025e0:	f8cd a000 	str.w	sl, [sp]
 80025e4:	aa03      	add	r2, sp, #12
 80025e6:	f7ff fedf 	bl	80023a8 <_printf_common>
 80025ea:	3001      	adds	r0, #1
 80025ec:	d14c      	bne.n	8002688 <_printf_i+0x200>
 80025ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f2:	b004      	add	sp, #16
 80025f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f8:	4834      	ldr	r0, [pc, #208]	; (80026cc <_printf_i+0x244>)
 80025fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025fe:	6829      	ldr	r1, [r5, #0]
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	f851 6b04 	ldr.w	r6, [r1], #4
 8002606:	6029      	str	r1, [r5, #0]
 8002608:	061d      	lsls	r5, r3, #24
 800260a:	d514      	bpl.n	8002636 <_printf_i+0x1ae>
 800260c:	07df      	lsls	r7, r3, #31
 800260e:	bf44      	itt	mi
 8002610:	f043 0320 	orrmi.w	r3, r3, #32
 8002614:	6023      	strmi	r3, [r4, #0]
 8002616:	b91e      	cbnz	r6, 8002620 <_printf_i+0x198>
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	f023 0320 	bic.w	r3, r3, #32
 800261e:	6023      	str	r3, [r4, #0]
 8002620:	2310      	movs	r3, #16
 8002622:	e7af      	b.n	8002584 <_printf_i+0xfc>
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	6023      	str	r3, [r4, #0]
 800262c:	2378      	movs	r3, #120	; 0x78
 800262e:	4828      	ldr	r0, [pc, #160]	; (80026d0 <_printf_i+0x248>)
 8002630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002634:	e7e3      	b.n	80025fe <_printf_i+0x176>
 8002636:	0659      	lsls	r1, r3, #25
 8002638:	bf48      	it	mi
 800263a:	b2b6      	uxthmi	r6, r6
 800263c:	e7e6      	b.n	800260c <_printf_i+0x184>
 800263e:	4615      	mov	r5, r2
 8002640:	e7bb      	b.n	80025ba <_printf_i+0x132>
 8002642:	682b      	ldr	r3, [r5, #0]
 8002644:	6826      	ldr	r6, [r4, #0]
 8002646:	1d18      	adds	r0, r3, #4
 8002648:	6961      	ldr	r1, [r4, #20]
 800264a:	6028      	str	r0, [r5, #0]
 800264c:	0635      	lsls	r5, r6, #24
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	d501      	bpl.n	8002656 <_printf_i+0x1ce>
 8002652:	6019      	str	r1, [r3, #0]
 8002654:	e002      	b.n	800265c <_printf_i+0x1d4>
 8002656:	0670      	lsls	r0, r6, #25
 8002658:	d5fb      	bpl.n	8002652 <_printf_i+0x1ca>
 800265a:	8019      	strh	r1, [r3, #0]
 800265c:	2300      	movs	r3, #0
 800265e:	4615      	mov	r5, r2
 8002660:	6123      	str	r3, [r4, #16]
 8002662:	e7ba      	b.n	80025da <_printf_i+0x152>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	2100      	movs	r1, #0
 8002668:	1d1a      	adds	r2, r3, #4
 800266a:	602a      	str	r2, [r5, #0]
 800266c:	681d      	ldr	r5, [r3, #0]
 800266e:	6862      	ldr	r2, [r4, #4]
 8002670:	4628      	mov	r0, r5
 8002672:	f000 f82f 	bl	80026d4 <memchr>
 8002676:	b108      	cbz	r0, 800267c <_printf_i+0x1f4>
 8002678:	1b40      	subs	r0, r0, r5
 800267a:	6060      	str	r0, [r4, #4]
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	6123      	str	r3, [r4, #16]
 8002680:	2300      	movs	r3, #0
 8002682:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002686:	e7a8      	b.n	80025da <_printf_i+0x152>
 8002688:	462a      	mov	r2, r5
 800268a:	4649      	mov	r1, r9
 800268c:	4640      	mov	r0, r8
 800268e:	6923      	ldr	r3, [r4, #16]
 8002690:	47d0      	blx	sl
 8002692:	3001      	adds	r0, #1
 8002694:	d0ab      	beq.n	80025ee <_printf_i+0x166>
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	079b      	lsls	r3, r3, #30
 800269a:	d413      	bmi.n	80026c4 <_printf_i+0x23c>
 800269c:	68e0      	ldr	r0, [r4, #12]
 800269e:	9b03      	ldr	r3, [sp, #12]
 80026a0:	4298      	cmp	r0, r3
 80026a2:	bfb8      	it	lt
 80026a4:	4618      	movlt	r0, r3
 80026a6:	e7a4      	b.n	80025f2 <_printf_i+0x16a>
 80026a8:	2301      	movs	r3, #1
 80026aa:	4632      	mov	r2, r6
 80026ac:	4649      	mov	r1, r9
 80026ae:	4640      	mov	r0, r8
 80026b0:	47d0      	blx	sl
 80026b2:	3001      	adds	r0, #1
 80026b4:	d09b      	beq.n	80025ee <_printf_i+0x166>
 80026b6:	3501      	adds	r5, #1
 80026b8:	68e3      	ldr	r3, [r4, #12]
 80026ba:	9903      	ldr	r1, [sp, #12]
 80026bc:	1a5b      	subs	r3, r3, r1
 80026be:	42ab      	cmp	r3, r5
 80026c0:	dcf2      	bgt.n	80026a8 <_printf_i+0x220>
 80026c2:	e7eb      	b.n	800269c <_printf_i+0x214>
 80026c4:	2500      	movs	r5, #0
 80026c6:	f104 0619 	add.w	r6, r4, #25
 80026ca:	e7f5      	b.n	80026b8 <_printf_i+0x230>
 80026cc:	08002a19 	.word	0x08002a19
 80026d0:	08002a2a 	.word	0x08002a2a

080026d4 <memchr>:
 80026d4:	4603      	mov	r3, r0
 80026d6:	b510      	push	{r4, lr}
 80026d8:	b2c9      	uxtb	r1, r1
 80026da:	4402      	add	r2, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	d101      	bne.n	80026e6 <memchr+0x12>
 80026e2:	2000      	movs	r0, #0
 80026e4:	e003      	b.n	80026ee <memchr+0x1a>
 80026e6:	7804      	ldrb	r4, [r0, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	428c      	cmp	r4, r1
 80026ec:	d1f6      	bne.n	80026dc <memchr+0x8>
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <memcpy>:
 80026f0:	440a      	add	r2, r1
 80026f2:	4291      	cmp	r1, r2
 80026f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80026f8:	d100      	bne.n	80026fc <memcpy+0xc>
 80026fa:	4770      	bx	lr
 80026fc:	b510      	push	{r4, lr}
 80026fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002702:	4291      	cmp	r1, r2
 8002704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002708:	d1f9      	bne.n	80026fe <memcpy+0xe>
 800270a:	bd10      	pop	{r4, pc}

0800270c <memmove>:
 800270c:	4288      	cmp	r0, r1
 800270e:	b510      	push	{r4, lr}
 8002710:	eb01 0402 	add.w	r4, r1, r2
 8002714:	d902      	bls.n	800271c <memmove+0x10>
 8002716:	4284      	cmp	r4, r0
 8002718:	4623      	mov	r3, r4
 800271a:	d807      	bhi.n	800272c <memmove+0x20>
 800271c:	1e43      	subs	r3, r0, #1
 800271e:	42a1      	cmp	r1, r4
 8002720:	d008      	beq.n	8002734 <memmove+0x28>
 8002722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800272a:	e7f8      	b.n	800271e <memmove+0x12>
 800272c:	4601      	mov	r1, r0
 800272e:	4402      	add	r2, r0
 8002730:	428a      	cmp	r2, r1
 8002732:	d100      	bne.n	8002736 <memmove+0x2a>
 8002734:	bd10      	pop	{r4, pc}
 8002736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800273a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800273e:	e7f7      	b.n	8002730 <memmove+0x24>

08002740 <_free_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4605      	mov	r5, r0
 8002744:	2900      	cmp	r1, #0
 8002746:	d040      	beq.n	80027ca <_free_r+0x8a>
 8002748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800274c:	1f0c      	subs	r4, r1, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	bfb8      	it	lt
 8002752:	18e4      	addlt	r4, r4, r3
 8002754:	f000 f910 	bl	8002978 <__malloc_lock>
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <_free_r+0x8c>)
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	b933      	cbnz	r3, 800276c <_free_r+0x2c>
 800275e:	6063      	str	r3, [r4, #4]
 8002760:	6014      	str	r4, [r2, #0]
 8002762:	4628      	mov	r0, r5
 8002764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002768:	f000 b90c 	b.w	8002984 <__malloc_unlock>
 800276c:	42a3      	cmp	r3, r4
 800276e:	d908      	bls.n	8002782 <_free_r+0x42>
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	1821      	adds	r1, r4, r0
 8002774:	428b      	cmp	r3, r1
 8002776:	bf01      	itttt	eq
 8002778:	6819      	ldreq	r1, [r3, #0]
 800277a:	685b      	ldreq	r3, [r3, #4]
 800277c:	1809      	addeq	r1, r1, r0
 800277e:	6021      	streq	r1, [r4, #0]
 8002780:	e7ed      	b.n	800275e <_free_r+0x1e>
 8002782:	461a      	mov	r2, r3
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b10b      	cbz	r3, 800278c <_free_r+0x4c>
 8002788:	42a3      	cmp	r3, r4
 800278a:	d9fa      	bls.n	8002782 <_free_r+0x42>
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	1850      	adds	r0, r2, r1
 8002790:	42a0      	cmp	r0, r4
 8002792:	d10b      	bne.n	80027ac <_free_r+0x6c>
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	4401      	add	r1, r0
 8002798:	1850      	adds	r0, r2, r1
 800279a:	4283      	cmp	r3, r0
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	d1e0      	bne.n	8002762 <_free_r+0x22>
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4401      	add	r1, r0
 80027a6:	6011      	str	r1, [r2, #0]
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	e7da      	b.n	8002762 <_free_r+0x22>
 80027ac:	d902      	bls.n	80027b4 <_free_r+0x74>
 80027ae:	230c      	movs	r3, #12
 80027b0:	602b      	str	r3, [r5, #0]
 80027b2:	e7d6      	b.n	8002762 <_free_r+0x22>
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	1821      	adds	r1, r4, r0
 80027b8:	428b      	cmp	r3, r1
 80027ba:	bf01      	itttt	eq
 80027bc:	6819      	ldreq	r1, [r3, #0]
 80027be:	685b      	ldreq	r3, [r3, #4]
 80027c0:	1809      	addeq	r1, r1, r0
 80027c2:	6021      	streq	r1, [r4, #0]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	6054      	str	r4, [r2, #4]
 80027c8:	e7cb      	b.n	8002762 <_free_r+0x22>
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
 80027cc:	20000094 	.word	0x20000094

080027d0 <sbrk_aligned>:
 80027d0:	b570      	push	{r4, r5, r6, lr}
 80027d2:	4e0e      	ldr	r6, [pc, #56]	; (800280c <sbrk_aligned+0x3c>)
 80027d4:	460c      	mov	r4, r1
 80027d6:	6831      	ldr	r1, [r6, #0]
 80027d8:	4605      	mov	r5, r0
 80027da:	b911      	cbnz	r1, 80027e2 <sbrk_aligned+0x12>
 80027dc:	f000 f8bc 	bl	8002958 <_sbrk_r>
 80027e0:	6030      	str	r0, [r6, #0]
 80027e2:	4621      	mov	r1, r4
 80027e4:	4628      	mov	r0, r5
 80027e6:	f000 f8b7 	bl	8002958 <_sbrk_r>
 80027ea:	1c43      	adds	r3, r0, #1
 80027ec:	d00a      	beq.n	8002804 <sbrk_aligned+0x34>
 80027ee:	1cc4      	adds	r4, r0, #3
 80027f0:	f024 0403 	bic.w	r4, r4, #3
 80027f4:	42a0      	cmp	r0, r4
 80027f6:	d007      	beq.n	8002808 <sbrk_aligned+0x38>
 80027f8:	1a21      	subs	r1, r4, r0
 80027fa:	4628      	mov	r0, r5
 80027fc:	f000 f8ac 	bl	8002958 <_sbrk_r>
 8002800:	3001      	adds	r0, #1
 8002802:	d101      	bne.n	8002808 <sbrk_aligned+0x38>
 8002804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002808:	4620      	mov	r0, r4
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	20000098 	.word	0x20000098

08002810 <_malloc_r>:
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002814:	1ccd      	adds	r5, r1, #3
 8002816:	f025 0503 	bic.w	r5, r5, #3
 800281a:	3508      	adds	r5, #8
 800281c:	2d0c      	cmp	r5, #12
 800281e:	bf38      	it	cc
 8002820:	250c      	movcc	r5, #12
 8002822:	2d00      	cmp	r5, #0
 8002824:	4607      	mov	r7, r0
 8002826:	db01      	blt.n	800282c <_malloc_r+0x1c>
 8002828:	42a9      	cmp	r1, r5
 800282a:	d905      	bls.n	8002838 <_malloc_r+0x28>
 800282c:	230c      	movs	r3, #12
 800282e:	2600      	movs	r6, #0
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4630      	mov	r0, r6
 8002834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002838:	4e2e      	ldr	r6, [pc, #184]	; (80028f4 <_malloc_r+0xe4>)
 800283a:	f000 f89d 	bl	8002978 <__malloc_lock>
 800283e:	6833      	ldr	r3, [r6, #0]
 8002840:	461c      	mov	r4, r3
 8002842:	bb34      	cbnz	r4, 8002892 <_malloc_r+0x82>
 8002844:	4629      	mov	r1, r5
 8002846:	4638      	mov	r0, r7
 8002848:	f7ff ffc2 	bl	80027d0 <sbrk_aligned>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	4604      	mov	r4, r0
 8002850:	d14d      	bne.n	80028ee <_malloc_r+0xde>
 8002852:	6834      	ldr	r4, [r6, #0]
 8002854:	4626      	mov	r6, r4
 8002856:	2e00      	cmp	r6, #0
 8002858:	d140      	bne.n	80028dc <_malloc_r+0xcc>
 800285a:	6823      	ldr	r3, [r4, #0]
 800285c:	4631      	mov	r1, r6
 800285e:	4638      	mov	r0, r7
 8002860:	eb04 0803 	add.w	r8, r4, r3
 8002864:	f000 f878 	bl	8002958 <_sbrk_r>
 8002868:	4580      	cmp	r8, r0
 800286a:	d13a      	bne.n	80028e2 <_malloc_r+0xd2>
 800286c:	6821      	ldr	r1, [r4, #0]
 800286e:	3503      	adds	r5, #3
 8002870:	1a6d      	subs	r5, r5, r1
 8002872:	f025 0503 	bic.w	r5, r5, #3
 8002876:	3508      	adds	r5, #8
 8002878:	2d0c      	cmp	r5, #12
 800287a:	bf38      	it	cc
 800287c:	250c      	movcc	r5, #12
 800287e:	4638      	mov	r0, r7
 8002880:	4629      	mov	r1, r5
 8002882:	f7ff ffa5 	bl	80027d0 <sbrk_aligned>
 8002886:	3001      	adds	r0, #1
 8002888:	d02b      	beq.n	80028e2 <_malloc_r+0xd2>
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	442b      	add	r3, r5
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	e00e      	b.n	80028b0 <_malloc_r+0xa0>
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	1b52      	subs	r2, r2, r5
 8002896:	d41e      	bmi.n	80028d6 <_malloc_r+0xc6>
 8002898:	2a0b      	cmp	r2, #11
 800289a:	d916      	bls.n	80028ca <_malloc_r+0xba>
 800289c:	1961      	adds	r1, r4, r5
 800289e:	42a3      	cmp	r3, r4
 80028a0:	6025      	str	r5, [r4, #0]
 80028a2:	bf18      	it	ne
 80028a4:	6059      	strne	r1, [r3, #4]
 80028a6:	6863      	ldr	r3, [r4, #4]
 80028a8:	bf08      	it	eq
 80028aa:	6031      	streq	r1, [r6, #0]
 80028ac:	5162      	str	r2, [r4, r5]
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	4638      	mov	r0, r7
 80028b2:	f104 060b 	add.w	r6, r4, #11
 80028b6:	f000 f865 	bl	8002984 <__malloc_unlock>
 80028ba:	f026 0607 	bic.w	r6, r6, #7
 80028be:	1d23      	adds	r3, r4, #4
 80028c0:	1af2      	subs	r2, r6, r3
 80028c2:	d0b6      	beq.n	8002832 <_malloc_r+0x22>
 80028c4:	1b9b      	subs	r3, r3, r6
 80028c6:	50a3      	str	r3, [r4, r2]
 80028c8:	e7b3      	b.n	8002832 <_malloc_r+0x22>
 80028ca:	6862      	ldr	r2, [r4, #4]
 80028cc:	42a3      	cmp	r3, r4
 80028ce:	bf0c      	ite	eq
 80028d0:	6032      	streq	r2, [r6, #0]
 80028d2:	605a      	strne	r2, [r3, #4]
 80028d4:	e7ec      	b.n	80028b0 <_malloc_r+0xa0>
 80028d6:	4623      	mov	r3, r4
 80028d8:	6864      	ldr	r4, [r4, #4]
 80028da:	e7b2      	b.n	8002842 <_malloc_r+0x32>
 80028dc:	4634      	mov	r4, r6
 80028de:	6876      	ldr	r6, [r6, #4]
 80028e0:	e7b9      	b.n	8002856 <_malloc_r+0x46>
 80028e2:	230c      	movs	r3, #12
 80028e4:	4638      	mov	r0, r7
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	f000 f84c 	bl	8002984 <__malloc_unlock>
 80028ec:	e7a1      	b.n	8002832 <_malloc_r+0x22>
 80028ee:	6025      	str	r5, [r4, #0]
 80028f0:	e7de      	b.n	80028b0 <_malloc_r+0xa0>
 80028f2:	bf00      	nop
 80028f4:	20000094 	.word	0x20000094

080028f8 <_realloc_r>:
 80028f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028fc:	4680      	mov	r8, r0
 80028fe:	4614      	mov	r4, r2
 8002900:	460e      	mov	r6, r1
 8002902:	b921      	cbnz	r1, 800290e <_realloc_r+0x16>
 8002904:	4611      	mov	r1, r2
 8002906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800290a:	f7ff bf81 	b.w	8002810 <_malloc_r>
 800290e:	b92a      	cbnz	r2, 800291c <_realloc_r+0x24>
 8002910:	f7ff ff16 	bl	8002740 <_free_r>
 8002914:	4625      	mov	r5, r4
 8002916:	4628      	mov	r0, r5
 8002918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800291c:	f000 f838 	bl	8002990 <_malloc_usable_size_r>
 8002920:	4284      	cmp	r4, r0
 8002922:	4607      	mov	r7, r0
 8002924:	d802      	bhi.n	800292c <_realloc_r+0x34>
 8002926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800292a:	d812      	bhi.n	8002952 <_realloc_r+0x5a>
 800292c:	4621      	mov	r1, r4
 800292e:	4640      	mov	r0, r8
 8002930:	f7ff ff6e 	bl	8002810 <_malloc_r>
 8002934:	4605      	mov	r5, r0
 8002936:	2800      	cmp	r0, #0
 8002938:	d0ed      	beq.n	8002916 <_realloc_r+0x1e>
 800293a:	42bc      	cmp	r4, r7
 800293c:	4622      	mov	r2, r4
 800293e:	4631      	mov	r1, r6
 8002940:	bf28      	it	cs
 8002942:	463a      	movcs	r2, r7
 8002944:	f7ff fed4 	bl	80026f0 <memcpy>
 8002948:	4631      	mov	r1, r6
 800294a:	4640      	mov	r0, r8
 800294c:	f7ff fef8 	bl	8002740 <_free_r>
 8002950:	e7e1      	b.n	8002916 <_realloc_r+0x1e>
 8002952:	4635      	mov	r5, r6
 8002954:	e7df      	b.n	8002916 <_realloc_r+0x1e>
	...

08002958 <_sbrk_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	2300      	movs	r3, #0
 800295c:	4d05      	ldr	r5, [pc, #20]	; (8002974 <_sbrk_r+0x1c>)
 800295e:	4604      	mov	r4, r0
 8002960:	4608      	mov	r0, r1
 8002962:	602b      	str	r3, [r5, #0]
 8002964:	f7fd ff32 	bl	80007cc <_sbrk>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_sbrk_r+0x1a>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_sbrk_r+0x1a>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	2000009c 	.word	0x2000009c

08002978 <__malloc_lock>:
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <__malloc_lock+0x8>)
 800297a:	f000 b811 	b.w	80029a0 <__retarget_lock_acquire_recursive>
 800297e:	bf00      	nop
 8002980:	200000a0 	.word	0x200000a0

08002984 <__malloc_unlock>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__malloc_unlock+0x8>)
 8002986:	f000 b80c 	b.w	80029a2 <__retarget_lock_release_recursive>
 800298a:	bf00      	nop
 800298c:	200000a0 	.word	0x200000a0

08002990 <_malloc_usable_size_r>:
 8002990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002994:	1f18      	subs	r0, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	bfbc      	itt	lt
 800299a:	580b      	ldrlt	r3, [r1, r0]
 800299c:	18c0      	addlt	r0, r0, r3
 800299e:	4770      	bx	lr

080029a0 <__retarget_lock_acquire_recursive>:
 80029a0:	4770      	bx	lr

080029a2 <__retarget_lock_release_recursive>:
 80029a2:	4770      	bx	lr

080029a4 <_init>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr

080029b0 <_fini>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr
